[{"categories":null,"content":"记录新版 PowerShell 美化过程。 ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:0","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"安装 Windows Terminal 可以在微软商店 (Microsoft Store) 搜索 Windows Terminal 安装。 商城搜索结果会有多种版本的Windows Terminal (以下将简称为Terminal)，不知选哪个的话，可直接点击此处链接 Windows Terminal - 微软商店，然后点击获取，弹出框中同意打开电脑的微软商城，跳转到软件主页后，直接安装即可。安装过程无需做任何选项与设置，就像在手机上的软件商城中搜索软件进行安装一样简单。 当然，如果想体验最新功能，可以去官方Github发布页获取最新预览版本：Windows Terminal - Github 安装完后的 Windows Terminal，可以在系统开始菜单找到并打开。先看一下美化前的样子。 朴实无华，看着其实也还不错。 可以看到Terminal的多窗口是标签化管理的，大为方便软件内的切换。而菜单栏上右侧的 +号可以快速开启一个默认类型的窗口。﹀下拉菜单可以选择各类终端窗口。 然后看一下终端显示的内容。因为要美化的是PowerShell，我便打开了一个Windows PowerShell窗口，键入命令 $PSVersionTable后回车，可以看到当前PowerShell的版本号为5.1，仍然是老版本。之后我们要将其换成 开源跨平台的船新版本。请看下文~ ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"安装 PowerShell 船新版本在哪里？当然看准官方发布渠道，我选了最新预览版：PowerShell 可以观察到，曾经的PowerShell 全名为 Windows PowerShell，但是现在去掉了前面的Windows，只留PowerShell一词；另外发布页的 Assets中也确实提供了各种平台的版本。这无疑是名副其实的跨平台了。 言归正传，从上面官方发布页中，我选择了 7.2.0-preview-win-x64 版本的msi安装包。下载下来安装包后，直接双击运行，会经历以下步骤，最后还有一个对话框点击install即可。 这个船新版本的船新 Logo 灰常 Cyber 的说。 添加 PowerShell 到 Terminal 打开 Terminal，点开菜单栏右侧下拉菜单，点击设置；或者直接按快捷键 Ctrl + ,，调出设置界面，按照下图步骤添加我们安装的 PowerShell 到Terminal中： 注意添加完后，点击保存。 Terminal无需重启即可即时更新配置，从下拉菜单中看到 PowerShell 7 已经添加成功。 下面开始我们的美化之路。 ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:2","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"美化 PowerShell 安装 on-my-posh 打开 Terminal，然后打开一个 PowerShell 窗口。 命令行中执行以下命令安装 oh-my-posh 模块 Install-Module oh-my-posh -Scope CurrentUser 设置主题 安装完成后，执行 Get-PoshThemes 命令，将以各自主题的样式列出支持的主题。 其中有一些乱码，这实际是一些图标，需要安装字体包来提供图标支持，具体方法后续给出。 先进行主题设置。选择主题可以从以上命令的返回结果中选择自己中意的，然后执行以下命令就能进行安装： Set-PoshPrompt -Theme 主题名字 我们需要配置 PowerShell 的启动脚本，以使主题永久生效。执行以下命令打开脚本文件。若提示文件不存在，则同意创建。 notepad $Profile 然后在打开的脚本文件中输入以下命令： Import-Module oh-my-posh Set-PoshPrompt -Theme agnosterplus # 此处将agnosterplus替换为自己选主题名即可 之后重启即可看到效果。 设置字体 为了对主题所需的图标符号提供支持，需要 Nerd Fonts 类字体，可以到字体集合主页Nerd Fonts 挑选喜欢的字体，可以预览字体效果。选好后直接下载字体文件即可。 经过一番查看，我最终凭感觉选择了Go Mono。 将下载的压缩包直接解压缩后，是一套字体文件，由于不需要其他用途，此处只安装正体的字体。选择不带Bold（加粗）不带Italic（斜体）的Windows Compatible字体文件，直接双击安装。 弹出的对话窗口，展示了字体样式，直接点击左上角安装即可。 字体已经安装好，接下来在 Terminal 下按Ctrl + ,打开设置，从左侧配置文件中选择到自己新建的PowerShell，我的是 PowerShell 7 ，然后右侧选择外观选项卡，找到字体下拉菜单，选择自己所选的字体名字即可，我的为 GoMono NF。 字体名可以从系统字体设置查看到，开始-\u003e设置-\u003e搜索字体设置-\u003e搜索字体关键字’GoMono'。可以看到我的字体名为GoMono NF。记住这个字体名，之后 VS Code 的终端 PowerShell 配置中会再次用到。 设置背景图 只需打开 Terminal 的设置，从左侧配置文件中选择到自己新建的PowerShell，然后右侧选择外观选项卡，找到背景图像设置项，浏览选择图片。选好图片后，下面会多出一些针对背景图的设置，包括模糊、透明、位置等，可以自行调整。 ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:3","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"VS Code 集成 PowerShell VS Code 内按快捷键 Ctrl + Shift + `，则在编辑窗口下面会打开一个（默认CMD）终端窗口。VS Code中已经自动集成了 CMD 和 Windows PowerShell。但我需要：1. 将新版的 PowerShell Preview 集成进来；2. 将其设置为默认打开；3. 更改终端字体，以提供主题包支持。 首先Ctrl + ,打开设置，然后搜索Terminal，找到Terminal \u003e Integrated \u003e Profiles: Windows的项，点击下面的在settings.json中编辑。 之后在打开的settings.json文件下，在terminal.integrated.profiles.windows项内按照以下红色框中代码的格式添加自己的 PowerShell 条目，其中的PowerShell 7 pre替换为自拟名字即可，path项内的路径替换为自己的 PowerShell 安装路径。然后保存并关闭文件。 通过以上操作，我们已经为终端窗口添加了新的 PowerShell。接下来将其设置为默认打开。 仍然Ctrl + ,打开设置，搜索Terminal，找到Terminal \u003e Integrated \u003e Default Profile: Windows项，下拉选项中选择我们上一步添加的 PowerShell 的名字PowerShell 7 pre。 在设置页，搜索Terminal Font，找到Terminal \u003e Integrated \u003e Font Family项，将其值设置为我们前面安装的字体文件名 GoMono NF，由于我选的这款字体本身字号挺大，所以我还将字号改为了 12。 经过以上配置，最终的效果如下图。 ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:4","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"参考 PowerShell 美化 - j3rry Nerd Fonts oh-my-push 文档 Using Visual Studio Code for PowerShell Development - Microsoft VS Code Integrated Terminal ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:5","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"最近因为汇总论文成果，需要提取论文的首页。虽然Acrobat提供了页面组织功能可以任意提取，但手动操作一次只能处理一个文件。当面对好几十篇论文时，尚未开始就已经放弃。 工欲善其事必先利其器，决定造个工具，一劳永逸提高效率。 以下代码基于 小白程序猿 的方案，面向我自己的需求作了一些调整适配。 环境与原料 Python PyMuPDF模块 pip install PyMuPDF 以下为完整代码： # coding:utf-8 import os import fitz # 解析 # 函数将file_path中所有文件（包括子目录中的文件），处理后，按照原目录保存到save_path下。 # 即save_path下的文件夹结构和file_path一致。 def analysis(file_path, save_path, num, toimg): # 资源列表 file_array = [] if os.path.isdir(file_path): # 目录循环压入 file_count = get_path_file(file_path) for v in file_count: file_array.append(v) else: # 单文件，单次调用 file_array.append(file_path) # 判断为空情况 if not file_array: print(\"此目录下无文件\") # 执行解析 file_count_num = len(file_array) print(\"程序运行中，共计%s个文件\" % file_count_num) success_num = file_count_num failed_file_array = [] for v in file_array: print(\"原文件路径：%s\" % v) # 获取文件名称及类型 file_name = os.path.basename(v) # print(\"文件信息：%s\" % file_name) if '.pdf' not in file_name: print(\"此文件非PDF文件，跳过\") failed_file_array.append(\"非 PDF文件：\" + file_name) success_num = success_num - 1 continue # 打开PDF文件，生成一个对象 doc = fitz.open(v) # 总页数 count_page = doc.pageCount # print(\"文件共计：%s页\" % count_page) if toimg == False: # 仅提取页面 if count_page \u003e 1: doc2 = fitz.open() # 创建新的空PDF doc2.insert_pdf(doc, to_page = num) # 提取doc的第1页到doc2 # 创建子目录 p_1 = v.replace(file_path, save_path) p_2 = p_1.replace(file_name, '') if not os.path.exists(p_2): os.makedirs(p_2) print(\"提取到路径：\" + p_2 + file_name) doc2.save(p_2 + file_name) # 保存提取出的PDF文件 print(\"提取完成\") else: print(\"此文档无内容，跳过\") failed_file_array.append(\"文件无内容：\" + file_name) success_num = success_num - 1 continue else: # 将页面转换为图片 if count_page \u003e 1: page = doc[num] rotate = int(0) # 每个尺寸的缩放系数为2，这将为我们生成分辨率提高四倍的图像。 zoom_x = 2.0 zoom_y = 2.0 trans = fitz.Matrix(zoom_x, zoom_y).preRotate(rotate) pm = page.getPixmap(matrix=trans, alpha=False) # 保存路径 # 创建子目录 p_1 = v.replace(file_path, save_path) p_2 = p_1.replace(file_name, '') if not os.path.exists(p_2): os.makedirs(p_2) new_file_name = file_name.replace(\".pdf\", \"\") print(\"提取到路径：\" + p_2 + '%s.png' % new_file_name) pm.writePNG(p_2 + '%s.png' % new_file_name) print(\"提取并转换为图片完成\") else: print(\"此文档无内容，跳过\") failed_file_array.append(file_name) success_num = success_num - 1 continue print(\"\\n\\n合计 %d个文件提取成功，以下文件提取失败：\" % success_num) for f in failed_file_array: print(f) # 返回目录下所有文件 def get_path_file(files_path): data = [] for root, dirs, files in os.walk(files_path, topdown=False): for name in files: f_p = os.path.join(root, name).replace(\"\\\\\", \"/\") data.append(f_p) return data # 规范路径的斜杠格式 def uni_path(path: str) -\u003e str: # return path.replace(r'\\/'.replace(os.sep, ''), os.sep) # 转换为当前系统的格式 return path.replace(\"\\\\\\\\\",\"/\").replace(\"\\\\\",\"/\") # 统一转换为unix格式 if __name__ == '__main__': print(\"|---------------------------------|\") print(\"|++++++++ PDF处理工具箱 ++++++++|\") print(\"|---------------------------------|\") print(\"| |\") print(\"| 1. PDF 批量提取首页 |\") print(\"| 2. PDF 批量提取首页并转换为图片 |\") print(\"| |\") print(\"|---------------------------------|\") # 选择处理方式 toimg = False choice = input(\"请输入要执行操作的编号：\") if choice == '1': toimg = False elif choice == '2': toimg =True # 当前目录下的文件 now_path = os.getcwd() print(\"当前位置：%s\" % now_path) # 保存路径 print(\"请输入参数，以 / 结尾\") save_path = input(\"提取文件保存地址:\") # 判断目录 save_path_status = os.path.exists(save_path) if not save_path_status: os.mkdir(save_path) # 截取页数 num = 0 # 截取第一页 # 路径或文件名 file_path = input(\"待处理PDF文件地址:\") # 调用方法 analysis(uni_path(file_path), uni_path(save_path), num, toimg) ","date":"2021-08-13","objectID":"/pdftoolbox/:0:0","series":null,"tags":["PDF"],"title":"基于Python批量提取PDF首页","uri":"/pdftoolbox/"},{"categories":null,"content":"参考 Python 提取 PDF 第一页为封面图片【批量提取】 Python 把任意系统的路径转换成当前系统的格式（关于 / \\ 分隔符的） python中os.walk的用法 python PyMuPDF(fitz)包中insert_pdf的用法 ","date":"2021-08-13","objectID":"/pdftoolbox/:0:1","series":null,"tags":["PDF"],"title":"基于Python批量提取PDF首页","uri":"/pdftoolbox/"},{"categories":null,"content":" 行内公式 $\\sum_{i=0}^{M}{\\frac{1}{i}}$ 。 独行公式 $$\\sum_{i=0}^{M}{\\frac{1}{i}}$$ ","date":"2021-08-12","objectID":"/%E6%B5%8B%E8%AF%95latex/:0:1","series":null,"tags":null,"title":"测试Latex","uri":"/%E6%B5%8B%E8%AF%95latex/"},{"categories":null,"content":"字符 $\\alpha,\\mathcal{abcd},\\mathscr{abcd}.$ ","date":"2021-08-12","objectID":"/%E6%B5%8B%E8%AF%95latex/:0:2","series":null,"tags":null,"title":"测试Latex","uri":"/%E6%B5%8B%E8%AF%95latex/"},{"categories":null,"content":"本文旨在记录基于Hugo静态博客建站工具 和LoveIt主题的个人博客过程，作为备忘。VS Code作为博客编辑、站点部署集成环境，站点维护仍然采用Github Pages。 由于 LoveIt 原作者已长期未维护，HEIGE-PCloud 基于 LoveIt 的新主题DoIt主题，并维持着更新。致敬∠(°ゝ°)。 DoIt 的安装配置同 LoveIt，因此此文档仍然可参考。 [toc] ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:0:0","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"准备工作 安装 VS Code； 安装 Git； ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:1:0","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"Hugo 安装 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:2:0","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"下载 Hugo Hugo 包括基础版本和支持自定义样式scss的 extended版本。 为了提高可用性，应对未来可能的自定义需求，我决定安装 Hugo extended 版本。 从 Hugo Release下载适合版本的压缩包，我的是Windows_x64。解压缩到想要安装的目录。解压出来，只有简单的一个主程序。可见，相对于 Hexo 依赖于 Node.js 及一大堆 npm 包，Hugo 的确非常的简洁。 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:2:1","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"添加环境变量 将 Hugo 的主程序路径添加到系统环境变量中，这样在命令行终端中才能调用主程序执行一系列命令，之后我们就能直接在VS Code的终端中执行命令。我的安装路径为： D:\\Dev\\hugo_0.86.0\\ 首先打开 资源管理器/我的电脑，然后在左侧导航栏，右键点击 此电脑，在弹出菜单中，打开 属性。 依次在弹出窗口中点击 高级系统设置。 在弹出窗口中点击环境变量。 双击 path 变量，点击 添加，将 Hugo 主程序路径填入，点击 确定以保存修改。 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:2:2","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"验证配置是否成功 VS Code 中 Ctrl+Shift+` ，打开终端，输入 hugo version，若能如下图所示，无错返回版本号，则环境配置成功。 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:2:3","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"建立站点 打开终端，进入想将站点源文件放置的路径，执行以下命令，其中站点名指定站点工程源文件夹的名字，按照自己的需求随便取即可，和实际的网站 url不是一个东西。执行命令后，会按指定的站点名创建站点文件夹，并在文件夹下自动初始化生成路径结构以及相关的站点文件。 // 其中，hugo.wlcheng.github.io 换成自己的站点文件夹名字即可 hugo new site hugo.wlcheng.github.io cd hugo.wlcheng.github.io 输出结果如下截图： 生成的站点目录结构： ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:2:4","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"LoveIt 主题 在Hugo 的主题商城扫了一圈，最后选了 LoveIt这一款主题。从 LoveIt的官方网站上逛了一圈，观感很棒。真可谓官方介绍的“一款简洁、优雅且高效的Hugo博客主题”。 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:3:0","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"安装主题 LoveIt 主题的仓库地址是 https://github.com/dillonzq/LoveIt 。 补充：DoIt 主体仓库地址是 https://github.com/HEIGE-PCloud/DoIt 。 可以直接下载最新版主题压缩包，将其解压到站点目录下的 themes文件夹中。 也可以直接用 git 克隆到该目录下，在站点目录下执行以下命令： git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:3:1","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"配置主题 替换站点配置文件 /config.toml 内容为： baseURL = \"http://wlchengg.github.io/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"Wlcheng's Life\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:3:2","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"创建文章 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:3:3","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"参考 主题文档 - 基本概念 —— Dillon —— LoveIt ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:4:0","series":null,"tags":null,"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"自用软件合集，方方面面。不列不知道，一列吓一跳，竟然有这么多。 ","date":"2021-07-24","objectID":"/%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/:0:0","series":null,"tags":null,"title":"自用软件清单","uri":"/%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/"},{"categories":null,"content":"软件清单 [TOC] 系统工具 名称 功能 官网 下载 付/免费 开/闭源 媒体影音 名称 功能 官网 下载 付/免费 开/闭源 PotPlayer 数学软件 名称 功能 官网 下载 付/免费 开/闭源 Matlab 矩阵计算 Wolfram Mathematica 符号计算 MathType 公式编辑 Mathpix Snip 公式识别/Tex代码导出 官网 东师理想几何图霸 2D/3D示意图 效率工具 名称 功能 官网 下载 付/免费 开/闭源 Everything Listary Snipaste QuickLook CopyTranslator 复制翻译 官网 Quicker 火萤 社交聊天 名称 功能 官网 下载 付/免费 开/闭源 办公编辑 名称 功能 官网 下载 付/免费 开/闭源 软件开发 名称 功能 官网 下载 付/免费 开/闭源 网盘远程 名称 功能 官网 下载 付/免费 开/闭源 坚果云 OneDrive 阿里网盘 百度网盘 ToDesk 向日葵 TeamViewer VNC 系统完善 名称 功能 官网 下载 付/免费 开/闭源 TranslucentTB 任务栏透明化 earTrumpet 扬声器加强版 浏览器扩展 名称 功能 官网 下载 付/免费 开/闭源 油猴/暴力猴 脚本管理 沙拉查词 划词翻译 OneTab 标签页汇总 SingleFileZ 网页存为HTML文件 iGG谷歌访问助手 谷歌访问 集装箱 谷歌访问 uBlock Origin 广告拦截 IDM 下载 Zotero 文献工具 简阅 网页沉浸阅读模式 OneTab 划词翻译 油猴(Temper Monkey)/暴力猴(Violent Monkey)脚本 名称 功能 官网 下载 付/免费 开/闭源 ac-baidu VSCode扩展 名称 功能 官网 下载 付/免费 开/闭源 Chinese (Simplified) Language C/C++ C++ Intellisence Python Markdown preview Enhanced Latex Workshop PowerShell ESLint Bracket Pair Colorizer 2 TODO Tree Bookmarks Better Comments Prettier One Dark Pro 主题 vscode-icons change-case Local History Partial Diff ","date":"2021-07-24","objectID":"/%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/:0:1","series":null,"tags":null,"title":"自用软件清单","uri":"/%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/"},{"categories":null,"content":"本文记录对 Hexo 博客所做的初次配置。 ","date":"2021-07-24","objectID":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:0","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链 打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： \u003cdiv class=\"sidebar-inner\u003e \u003c!--网易云插件--\u003e \u003ciframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2\u0026id=25780279\u0026auto=1\u0026height=66\"\u003e\u003c/iframe\u003e \u003c/div\u003e 歌单外链 如果出现以上的版权限制，按照链接进行以下操作，： 组合成外链地址：https://music.163.com/#/outchain/0/37673790/ 但很遗憾，弹出生成失败的提示，应该是版权限制。 挖个坑，有时间来补充解决方案。 Pjax 实现背景音乐全局播放 页面跳转刷新时，音乐不间断播放。 打开主题目录下 themes/next/layout/_layout.njk 文件， 在 \u003c/head\u003e 标签前添加以下代码，并保存。 \u003chead\u003e \u003c!--pjax：防止跳转页面音乐暂停--\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js\"\u003e\u003c/script\u003e \u003c/head\u003e 主题配置文件_config.yml里，打开 pjax 开关。 # Easily enable fast Ajax navigation on your website.# For more information: https://github.com/next-theme/pjaxpjax:true 参考： Hexo NexT 博客增加网易云音乐 Hexo + Next 主题实现全局播放背景音乐 主页文章阴影效果 打开 \\themes\\next\\source\\css\\_commom\\components\\posts\\index.styl，修改 .use-motion 下的 .post-block 代码，如下： // 主页添加阴影效果 .use-motion { if (hexo-config('motion.transition.post_block')) { .post-block { visibility: hidden; margin-top: 60px; margin-bottom: 60px; padding: 25px; background: rgba(255,255,255,0.9) none repeat scroll !important; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); } .pagination, .comments { visibility: hidden; } } 效果如下： 修改文章底部标签图标样式 打开 themes/next/_config.yml，搜索并将 tag_icon 项打开。原样式为\"#\"。 tag_icon:true 文章置顶（作废） 打开 themes\\next\\layout\\_macro\\post.njk，在 post-meta-container中添加以下代码： {% if post.top %} \u003ci class=\"fa fa-thumb-tack\"\u003e\u003c/i\u003e \u003cfont color=7D26CD\u003e置顶\u003c/font\u003e \u003cspan class=\"post-meta-divider\"\u003e|\u003c/span\u003e {% endif %} 文章手动排序 打开 node_modules/hexo-generator-index/lib/generator.js，修改代码为： \"use strict\"; const pagination = require(\"hexo-pagination\"); const { sort } = require(\"timsort\"); module.exports = function (locals) { var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function (a, b) { if (a.top \u0026\u0026 b.top) { // 两篇文章top都有定义 if (a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 } else if (a.top \u0026\u0026 !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; } else if (!a.top \u0026\u0026 b.top) { return 1; } else return b.date - a.date; // 都没定义按照文章日期降序排 }); var paginationDir = config.pagination_dir || \"page\"; var path = config.index_generator.path || \"\"; return pagination(\"\", posts, { perPage: config.index_generator.per_page, layout: [\"index\", \"archive\"], format: paginationDir + \"/%d/\", data: { __index: true, }, }); }; 在博文源文件头部加上 top 标识，数字越大，优先级越高： 参考： hexo 博文置顶方法——大专栏 折叠过长代码块（按参考未成功） 添加 code-unfold.js 文件 新建以下代码折叠脚本文件，放在 themes/next/source/js/下。 var CODE_MAX_HEIGHT = 200; var containers = []; // 展开 $('body').on('click', '.js_unfold_code_btn', function () { $(this).closest('.js_highlight_container').addClass('on'); }); // 收起 $('body').on('click', '.js_retract_code_btn', function () { var $container = $(this).closest('.js_highlight_container').removeClass('on'); var winTop = $(window).scrollTop(); var offsetTop = $container.offset().top; $(this).css('top', 0); if (winTop \u003e offsetTop) { // 设置滚动条位置 $('body, html').animate({ scrollTop: $container.offset().top - CODE_MAX_HEIGHT }, 600); } }); // 滚动事件，触发动画效果 $(window).on('scroll', function () { var scrollTop = $(window).scrollTop(); var temp = []; for (let i = 0; i \u003c containers.length; i++) { var item = containers[i]; var { $container, height, $hide, hasHorizontalScrollbar } = item; if ($container.closest('body').length === 0) { // 如果 $container 元素已经不在页面上, 则删除该元素 // 防止pjax页面跳转之后，元素未删除 continue; } temp.push(item); if (!$container.hasClass('on')) { continue; } var offsetTop = $container.offset().top; var hideBtnHeight = $hide.outerHeight(); // 减去按钮高度，减去底部滚动条高度 var maxTop = parseInt(height - (hasHorizontalScrollbar ? 17 : 0) - hideBtnHeight); let top = parseInt( Math.min( Math.max(scrollTop - offsetTop, 0), // 如果小于 0 ，则取 0 maxTop,// 如果大于 height ，则取 height ) ); // 根据 sin 曲线设置\"收起代码\"位置 var halfHeight = parseInt($(window).height() / 2 * Math.s","date":"2021-07-24","objectID":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"参考 Hexo Next 主题详细配置之一——Clay ","date":"2021-07-24","objectID":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:2","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"安装 Mathtype 过程记录，并解决集成到 Word 菜单栏的问题。 ","date":"2019-11-28","objectID":"/mathtype-setup-for-word/:0:0","series":null,"tags":["MathType","Word"],"title":"MathType安装及 Word菜单项集成","uri":"/mathtype-setup-for-word/"},{"categories":null,"content":"MathType 安装问题 ","date":"2019-11-28","objectID":"/mathtype-setup-for-word/:1:0","series":null,"tags":["MathType","Word"],"title":"MathType安装及 Word菜单项集成","uri":"/mathtype-setup-for-word/"},{"categories":null,"content":"安装并破解 从 6维空间上下载的MathType 7.2版本，按照说明 首先安装 MathType-win-zh7.2.exe，安装过程一切顺利，因为安装需要向Office 添加加载项，所以需要将Office 一切程序都关闭； 以防意外，打开之前MathType 和Office 之前，先进行破解，提供的破解软件有两个，作用不同： [neubt]MathType替换原文件.exe：替换MathType 根目录的主启动程序 MathType.exe，作用是去掉打开程序时提示测试版到期的弹窗通知。 [neubt]MathType7.xCrack.zip：解压后得到mathtypelib.exe，替换MathType 根目录下System 子文件夹里的同名文件。 完成以上两个文件的替换后，启动 MathType，会弹出一个对话框，但按钮上的字都变成了问号，不管他，直接叉掉对话框，然后可以发现功能完善，应该是已经成功破解。 打开Word，菜单栏上应该会多出一个 MathType的菜单项，说明安装成功，如果没有菜单项，请看下文解决方案。 ","date":"2019-11-28","objectID":"/mathtype-setup-for-word/:1:1","series":null,"tags":["MathType","Word"],"title":"MathType安装及 Word菜单项集成","uri":"/mathtype-setup-for-word/"},{"categories":null,"content":"Word 没有MathType 菜单项 问题： 首先来说，MathType 正确加载的话，Word 的菜单栏上会有 MathType，如下 而现在问题是，打开Word，菜单栏没有 MathType 项， 原因： [1] 中给出的原因可以描述为 “当Microsoft Office自动更新程序运行并安装更新时，有时会禁用加载项，这样就会删除任何工具栏/功能区附加项。” Word 上的 MathType加载项要能正确运行并使用，须满足： MathType 正确安装； Word 正确加载 MathType 提供的加载项文件。 可见在MathType 本身安装无误情况下(指MathType 软件本身能正常使用)，Word 没有MathType菜单项的原因大概率就是因为 Word 没能正确的加载 MathType 加载项。 解决方案： 此时虽然可以迂回的通过以下方式插入公式： 通过插入对象的方式，插入-\u003e对象-\u003e选择MathType对象； 直接从MathType 软件里编辑好的公式复制进Word。 但是，如果要实现插入带编号公式等较高级的功能的话，还是用集成的 MathType工具栏方便的多，从前面的图就可见一斑。 准备工作： 首先查看 Office Word 版本以及 MathType版本，兼容关系为 查看我的版本分别为 Word：文件-\u003e账户-\u003e关于-\u003e Office 365 32位，因此需要MathType 版本大于 6.9b MathType：关于-\u003e7.2.0.420 \u003e 6.9b 确定Word 和 MathType安装路径： Office 安装路径：D:\\Program Files (x86)\\Microsoft Office\\ MathType 路径：D:\\Math\\MathType\\ 安装路径可能不同，根据自己情况而定。 步骤： Word菜单栏-\u003e文件-\u003e选项-\u003e加载项-\u003e底部管理下拉框选择 Word加载项 并点击转到，弹出类似下面的对话框， 没问题的情况下，这里的第一项应该是被勾选上的，如下说明。 如果，没有以上对话框中的项，则选择从以下两个目录之一中 添加 正确版本的 .dotm文件，然后勾选并确定。 D:\\Math\\MathType\\Office Support\\32 （32位 Office） D:\\Math\\MathType\\Office Support\\64 （64位 Office） 对于我的版本，选择 MathType Commands 2016.dotm 这一个 勾选 MathType Commands 2016.dotm 项并 确定后，Word会加载出MathType 的菜单项，如图1所示。 然而，然而，然而事情并非如此简单， 当关闭Word，并重新打开后，忙半天加上的MathType 菜单项又没啦。 这么看应该是设置的问题，在Word 启动时，并没有自动加载 MathType 加载项。那么要自动加载，是不是就得把这个MathType Commands 2016.dotm 文件放到Word 的默认加载目录下面？ 但是再次按照第3步，打开Word 加载项对话框，发现有这一项，但却没有勾选。那么怎么设置为默认勾选呢？ 幸而 [2] 对此也给出了解决方案：由于不同版本的系统、Office软件或者不同用户自定义的原因，Word 的加载项路径可能不一样。 根据说明，需要将前面的两个文件拷贝到 Word的加载项（启动项）目录下面，目录存在以上图中 3种可能，图中 1和 2根据 Office 是32位/64位只取其一。 以做对比，将可能的三个目录位置都打开，如下1、2、3，依次将这两个文件放到这三个目录下， 经过尝试，，放在 2对应路径下时，Word成功加载了MathType菜单项。 比较前后两张图，此处有一个问题，下图中除了拷贝进去的两个模板文件外，还有一个MathPage.wll，这个文件实际上是一种DLL文件，也不可少，也是来自于MathType的安装目录，事实上，当MathType安装成功后，会自动将其拷贝到这个 2 对应的目录，一般无需手动添加，如果发现没有，可以从MathType安装根目录下的MathType文件夹里面找到，如下图，根据32位或64位选择。 总结 最后，来回顾一下过程，根据 常用设置 中的，《查看 Word 相关各类文件的默认位置》就能够查看Word 默认的启动项位置，正好是上面给出的第二种目录。 因此，解决以上问题的正确思路应该是，将模板加载项文件拷贝到 Word的默认的启动项位置目录下。 参考： [1] MathType Toolbar/Tab has disappeared from Microsoft Word [2] MathType Tab has disappeared from Microsoft Word 2016 and later for Windows ","date":"2019-11-28","objectID":"/mathtype-setup-for-word/:1:2","series":null,"tags":["MathType","Word"],"title":"MathType安装及 Word菜单项集成","uri":"/mathtype-setup-for-word/"},{"categories":null,"content":"夕阳西下 清晨的东方已默默站在面前了 —— 泰戈尔《飞鸟集》 ","date":"2019-11-28","objectID":"/poem-of-beginning/:0:0","series":null,"tags":null,"title":"起源","uri":"/poem-of-beginning/"}]