[{"categories":["技术"],"content":"速查 Git 常用的命令和用法。分为基本（commit、branch、checkout、merge、rabase 等）和远程（clone、push、pull 等）两部分。 本文基于 chatGPT 自动生成初稿（省时省力😁），并参考 learngitbranching 进行调整。 ","date":"2025-06-08","objectID":"/posts/git_command_list/:0:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#"},{"categories":["技术"],"content":" 基本命令git init：创建一个新的 Git 仓库。 git add [file]：将文件添加到 Git 的暂存区。 git commit -m [message]：将暂存区的文件提交到 Git 仓库，并添加一条注释。 git status：查看当前 Git 仓库的状态，包括已修改、已暂存和未跟踪的文件。 git diff：查看未暂存文件和最后一次提交之间的差异。 git diff --staged：查看已暂存文件和最后一次提交之间的差异。 git log：查看 Git 仓库的提交历史。 git reflog：查看命令历史，即分支的所有操作记录。 git tag [name]：给当前的提交打上标签。 git reset：取消暂存或取消上一次提交。 git rm [file]：从 Git 仓库中删除文件。 ","date":"2025-06-08","objectID":"/posts/git_command_list/:1:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#基本命令"},{"categories":["技术"],"content":" 分支相关git branch [name]：创建一个新的分支。 git branch -d[D] [name]：删除[强制删除]一个分支。 git checkout [branch-name]：切换到另一个分支。 git checkout -b [branch-name]：创建同时切换到另一个分支。 git merge [branch]：将指定的分支合并到当前分支。 git rebase [branch]：将当前分支的提交步骤顺接到指定分支。 ","date":"2025-06-08","objectID":"/posts/git_command_list/:2:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#分支相关"},{"categories":["技术"],"content":" 远程相关git clone [url]：从远程仓库克隆一个副本到本地。 git pull：从远程仓库拉取最新的代码到本地。 git push [origin] [master]：将本地 master 分支推送到远程仓库。 git remote -[v] 查看远程仓库[详细]信息。 git remote add [name] [url]：将远程仓库添加到 Git 仓库。 git fetch：从远程仓库获取最新的代码，但不进行合并。先fetch，再merge就相当于pull。 ","date":"2025-06-08","objectID":"/posts/git_command_list/:3:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#远程相关"},{"categories":["技术"],"content":" 其他HEAD：指向当前正在处理的提交记录。 C^[number]：表示指向提交记录 C 的第 number 个直接父记录（宽度搜索）。一个记录可能会有多个父记录（执行 merge 时产生）。C^ 和 C^1 等价；number大于 1 时表示指向其他父记录。 C~[number]：表示指向提交记录 C 的回溯第 number 代的祖先记录（深度搜索）。 ","date":"2025-06-08","objectID":"/posts/git_command_list/:4:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#其他"},{"categories":["技术"],"content":" 参考 [1] Peter Cottle. learngitbranching. https://learngitbranching.js.org/?locale=zh_CN [2] GitHub Docs. Git Cheat Sheets. https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/ [3] Visual Git Cheat Sheet. https://ndpsoftware.com/git-cheatsheet.html [4] Blue Stragglers. 一个有趣的 Git 练习网站. https://zhuanlan.zhihu.com/p/383960650 ","date":"2025-06-08","objectID":"/posts/git_command_list/:5:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#参考"},{"categories":["技术"],"content":" 更多 git 知识和用法","date":"2025-06-08","objectID":"/posts/git_command_list/:0:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#更多-git-知识和用法"},{"categories":["技术"],"content":" git 本地仓库文件夹结构在 git repo 文件夹下，命令行执行 git init 初始化后，会生成一个 .git 文件夹，里面包含以下内容： .git/HEAD：指向当前分支 .git/config：配置文件 .git/description：描述文件 .git/index：索引文件 .git/hooks/：钩子脚本 .git/info/：包含全局忽略文件 .git/objects/：存储对象（commit、tree、blob） .git/refs/：存储引用（branch、tag） .git/logs/：存储提交日志 一般来说，.git 文件夹自动隐藏了，Power Shell 可以通过 ls -Hidden 命令查看。 ","date":"2025-06-08","objectID":"/posts/git_command_list/:1:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#git-本地仓库文件夹结构"},{"categories":["技术"],"content":" git 中的一些概念","date":"2025-06-08","objectID":"/posts/git_command_list/:2:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#git-中的一些概念"},{"categories":["技术"],"content":" 对象（名词） commit：提交，每次提交都会生成一个 commit id，commit id 是一个 40 位的哈希值，用来唯一标识一个 commit。 tree：树，每个 commit 都有一个 tree，用来存储该 commit 修改的文件和目录结构。 blob：块，每个文件都会被存储为一个 blob，用来存储文件的内容。 branch：分支，每个分支都有一个指向最新的 commit 的指针。 tag：标签，用来标记某个 commit，通常用来标记 release 版本。 HEAD：当前分支的指针，指向当前分支的最新 commit。 index：索引，用来存储暂存区的文件。 remote：远程仓库，用来存储远程的 git 仓库。 ","date":"2025-06-08","objectID":"/posts/git_command_list/:2:1","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#对象名词"},{"categories":["技术"],"content":" origin 远程仓库别名 origin：远程仓库的别名，通常用来表示远程仓库。可以把它看作是远程仓库的“默认地址”。 在 Git 中，origin 是一个默认的远程仓库名称，它通常指向你克隆时指定的远程仓库。简单来说，origin 代表远程仓库的默认别名。你可以把它看作是远程仓库的“默认地址”。 默认远程仓库名称： 当你克隆一个仓库时，Git 会自动把源仓库的 URL 赋给一个默认的远程名称 origin。 例如，执行 git clone https://github.com/user/repo.git 后，origin 就会指向该 URL。 查看远程仓库地址： 你可以通过以下命令查看 origin（以及其他远程仓库）的 URL： bash git remote -v 输出示例： bash origin https://github.com/user/repo.git (fetch) origin https://github.com/user/repo.git (push) 常见的 origin 用法： git fetch origin：从 origin 获取远程更新。 git push origin \u003cbranch-name\u003e：将本地的某个分支推送到 origin 上。 git pull origin \u003cbranch-name\u003e：从 origin 拉取并合并远程分支到当前分支。 修改远程仓库名称： 如果你想给远程仓库指定不同的名称（除了 origin），可以使用 git remote rename 命令： bash git remote rename origin new-remote-name origin 只是一个名字： origin 只是一个约定俗成的名称，你完全可以把它改为其他名字。如果你与多个远程仓库交互，可以给每个远程仓库取不同的名字，例如 upstream 或 myfork，这样有助于区分不同的远程仓库。 总之，origin 是 Git 中的一个默认远程仓库别名，用于简化与远程仓库的交互。 ","date":"2025-06-08","objectID":"/posts/git_command_list/:2:2","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#origin-远程仓库别名"},{"categories":["技术"],"content":" 操作（动词） push：推送，将本地的 commit 推送到远程仓库。 pull：拉取，从远程仓库拉取最新的 commit。 merge：合并，将两个分支的 commit 合并成一个 commit。 rebase：变基，将一个分支的 commit 变基到另一个分支上。 reset：重置，将暂存区和工作区重置到指定的 commit。 checkout：检出，将工作区切换到指定的 commit。 ","date":"2025-06-08","objectID":"/posts/git_command_list/:2:3","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#操作动词"},{"categories":["技术"],"content":" git 基本命令 git init：初始化 git 仓库 git add \u003cfile\u003e...：添加文件到暂存区 git add . 或 git add -A：添加所有文件到暂存区 git status：查看当前 git 状态 git diff：查看暂存区与工作区的差异 git diff --cached：查看暂存区与本地仓库的差异 git diff HEAD：查看工作区与本地仓库的差异 git diff \u003ccommit\u003e：查看工作区与指定 commit 的差异 git diff \u003ccommit\u003e \u003ccommit\u003e：查看两个 commit 之间的差异 git diff \u003cbranch\u003e：查看工作区与指定 branch 的差异 git diff \u003cbranch\u003e \u003cbranch\u003e：查看两个 branch 之间的差异 git diff \u003ccommit\u003e \u003cbranch\u003e：查看 commit 与 branch 之间的差异 git diff \u003ccommit\u003e \u003ccommit\u003e \u003cbranch\u003e：查看两个 commit 与 branch 之间的差异 git diff \u003ccommit\u003e \u003ccommit\u003e \u003ccommit\u003e：查看三个 commit 之间的差异 git rm \u003cfile\u003e：删除文件 git mv \u003cfile\u003e \u003cfile\u003e：移动文件 git rm --cached \u003cfile\u003e：删除暂存区的文件 git mv --cached \u003cfile\u003e \u003cfile\u003e：移动暂存区的文件 git reset：重置暂存区 git reset --hard：重置暂存区和工作区 git reset --soft：重置暂存区，保留工作区 git reset --mixed：重置暂存区和工作区，保留 commit git reset --hard \u003ccommit\u003e：重置暂存区和工作区到指定 commit git reset --soft \u003ccommit\u003e：重置暂存区到指定 commit，保留工作区 git reset --mixed \u003ccommit\u003e：重置暂存区和工作区到指定 commit，保留 commit git reset --hard HEAD~1：重置暂存区和工作区到上一个 commit git reset --hard HEAD^^：重置暂存区和工作区到上两个 commit git reset --hard HEAD~n：重置暂存区和工作区到上 n 个 commit 撤销提交后恢复（git reset、git commit --amend、git revert等方式撤销/修改了原来的提交） git log：查看提交日志，找到需要恢复的 commit id git reset --hard \u003ccommit_id\u003e：重置暂存区和工作区到指定 commit git reflog：查看引用日志，找到需要恢复的 commit id。Git 的 reflog 记录了仓库中 HEAD 和分支头的变动历史。即使提交被撤销，它们仍然被记录在 reflog 中，只要它们还在 Git 的数据库中。 git reset --hard \u003ccommit_id\u003e：重置暂存区和工作区到指定 commit git commit -m \"commit message\"：提交暂存区的文件到本地仓库 git commit：提交暂存区的文件到本地仓库 git commit --amend：修改最近一次提交的 commit message git log：查看提交日志，展示每次提交的 commit id、commit message、commit author、commit date git log --oneline：查看提交日志（简洁），展示每次提交的 commit id 和 commit message git log --graph：查看提交日志（图形化），展示提交树 git log --stat：查看提交日志（统计），展示每次提交的修改文件和修改数 git log --pretty=format:\"%h - %an, %ar : %s\"：查看提交日志（自定义格式），展示每次提交的 commit id、commit author、commit date 和 commit message git log --pretty=format:\"%h - %an, %ar : %s\" --graph：查看提交日志（自定义格式+图形化），展示每次提交的 commit id、commit author、commit date 和 commit message git log \u003cbranch\u003e：查看指定分支的提交日志 git tag：查看所有标签 git show \u003ctagname\u003e：查看标签信息 git tag \u003ctagname\u003e：创建轻量标签 git tag \u003ctagname\u003e \u003ccommit_hash\u003e：为指定 commit 创建标签 git tag -a \u003ctagname\u003e -m \"tag message\"：创建带有描述的标签 git tag -d \u003ctagname\u003e：删除本地标签 git push origin \u003ctagname\u003e：推送标签到远程仓库。标签默认旨在本地仓库存在。 git push origin --tags：推送所有标签到远程仓库 删除远程标签步骤 删除本地标签：git tag -d \u003ctagname\u003e 删除远程标签：git push origin --delete tag \u003ctag_name\u003e 验证是否删除：git ls-remote --tags origin git merge \u003cbranch\u003e：合并指定 branch 到当前 branch git merge --no-ff \u003cbranch\u003e：合并指定 branch 到当前 branch，不使用 fast-forward git merge --squash \u003cbranch\u003e：合并指定 branch 到当前 branch，将所有 commit 合并为一个 commit git merge --no-commit \u003cbranch\u003e：合并指定 branch 到当前 branch，不自动提交 git merge --abort：取消合并，回到合并前的状态 git merge --continue：继续合并，解决冲突后继续合并，解决冲突后需要手动提交 git merge --ff-only \u003cbranch\u003e：合并指定 branch 到当前 branch，只使用 fast-forward git merge --no-ff --no-commit \u003cbranch\u003e：合并指定 branch 到当前 branch，不使用 fast-forward，不自动提交 git merge --no-ff --squash \u003cbranch\u003e：合并指定 branch 到当前 branch，不使用 fast-forward，将所有 commit 合并为一个 commit git merge --no-ff --no-commit --squash \u003cbranch\u003e：合并指定 branch 到当前 branch，不使用 fast-forward，不自动提交，将所有 commit 合并为一个 commit git rebase \u003cbranch\u003e：将当前 branch 的提交应用到指定 branch 上，保留指定 branch 的提交 git rebase --onto \u003cbranch\u003e \u003cbranch\u003e：将当前 branch 的提交应用到指定 branch 上，忽略指定 branch 的提交 git rebase --interactive \u003cbranch\u003e：交互式 rebase，可以修改、删除、合并提交 git branch：查看当前分支 git branch \u003cbranch\u003e：创建分支 git branch -d \u003cbranch\u003e：删除分支 git branch -D \u003cbranch\u003e：强制删除分支 git branch -m \u003cbranch\u003e：重命名分支 git branch -M \u003cbranch\u003e：强制重命名分支 git branch -r：查看远程分支 git branch -a：查看所有分支 git branch -vv：查看本地分支与远程分支的关联 git branch -u \u003cremote\u003e/\u003cbranch\u003e：设置本地分支与远程分支的关联 git branch -d -r \u003cremote\u003e/\u003cbranch\u003e：删除远程分支 git branch -D -r \u003cremote\u003e/\u003cbranch\u003e：强制删除远程分支 重命名远程分支 git branch -m \u003cold-branch\u003e \u003cnew-branch\u003e：重命名本地分支 git branch -M \u003cold-branch\u003e \u003cnew-branch\u003e：强制重命名本地分支 git checkout \u003cbranch\u003e：切换分支 git checkout -b \u003cbranch\u003e：创建并切换分支 git checkout -B \u003cbranch\u003e：强制创建并切换分支 git checkout \u003ccommit\u003e：切换到指定 commit，即将 HEAD 指向这个commit。会提示 detached HEAD 警告，因为此时 HEAD 不再指向任何分支，而是指向一个具体的 commit。此时可以进行任意修改，但不会影响其他分支。如果需要创建一个新的分支来保存这些修改，可以使用 git switch -c \u003cnew-","date":"2025-06-08","objectID":"/posts/git_command_list/:3:0","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#git-基本命令"},{"categories":["技术"],"content":" 远程仓库操作 git clone \u003crepository\u003e：克隆远程仓库 git clone \u003crepository\u003e \u003cdirectory\u003e：克隆远程仓库到指定目录 git clone --depth \u003cdepth\u003e \u003crepository\u003e：克隆远程仓库，只克隆最近 depth 个 commit git clone --branch \u003cbranch\u003e \u003crepository\u003e：克隆远程仓库的指定分支 git clone --single-branch \u003crepository\u003e：克隆远程仓库的单个分支 git clone --mirror \u003crepository\u003e：克隆远程仓库的镜像 git clone --bare \u003crepository\u003e：克隆远程仓库的裸仓库 git clone --depth \u003cdepth\u003e --branch \u003cbranch\u003e \u003crepository\u003e：克隆远程仓库的指定分支，只克隆最近 depth 个 commit git clone --depth \u003cdepth\u003e --single-branch \u003crepository\u003e：克隆远程仓库的单个分支，只克隆最近 depth 个 commit git clone --depth \u003cdepth\u003e --mirror \u003crepository\u003e：克隆远程仓库的镜像，只克隆最近 depth 个 commit git clone --depth \u003cdepth\u003e --bare \u003crepository\u003e：克隆远程仓库的裸仓库，只克隆最近 depth 个 commit git remote -v：查看远程仓库 git remote add \u003cname\u003e \u003curl\u003e：添加远程仓库 git remote remove \u003cname\u003e：删除远程仓库 git remote rename \u003cold-name\u003e \u003cnew-name\u003e：重命名远程仓库 git remote set-url \u003cname\u003e \u003curl\u003e：设置远程仓库的 URL git remote set-url --add \u003cname\u003e \u003curl\u003e：添加远程仓库的 URL git remote set-url --delete \u003cname\u003e \u003curl\u003e：删除远程仓库的 URL git remote update \u003cname\u003e：更新远程仓库 git remote prune \u003cname\u003e：删除远程仓库中已经不存在的分支 git remote show \u003cname\u003e：查看远程仓库的信息 git remote set-head \u003cname\u003e \u003cbranch\u003e：设置远程仓库的默认分支 git remote set-branches \u003cname\u003e \u003cbranch\u003e：设置远程仓库的分支 git fetch \u003cname\u003e：获取远程仓库的所有分支 git fetch \u003cname\u003e \u003cbranch\u003e：获取远程仓库的指定分支 git push \u003cname\u003e \u003cbranch\u003e：将当前分支推送到远程仓库的指定分支 git push \u003cname\u003e \u003cbranch\u003e:\u003cbranch\u003e：将当前分支推送到远程仓库的指定分支，并重命名远程分支 git push -u \u003cname\u003e \u003cbranch\u003e：将当前分支推送到远程仓库的指定分支，并设置远程仓库的默认分支 git push origin --delete \u003cbranch\u003e：删除远程仓库的指定分支 git push --set-upstream origin \u003cbranch\u003e：设置远程仓库的默认分支 git pull \u003cname\u003e \u003cbranch\u003e：获取远程仓库的指定分支，并合并到当前分支 git pull --set-upstream origin \u003cbranch\u003e：获取远程仓库的指定分支，并设置远程仓库的默认分支 ","date":"2025-06-08","objectID":"/posts/git_command_list/:3:1","series":null,"tags":["git"],"title":"Git 常用命令和用法","uri":"/posts/git_command_list/#远程仓库操作"},{"categories":null,"content":"本文记录安装 Matlab 2021a 的安装过程，以及光天化日下的激活方法。 安装包下载 Matlab R2021a 安装包： MathWorks 官方下载 或转自 Robot-G 的 阿里云盘 Matlab910Win 破解工具包： https://wlcheng.lanzouo.com/iAPxr0qkwoha 密码:fcaz ","date":"2025-04-03","objectID":"/posts/install_matlab/:0:0","series":null,"tags":["matlab"],"title":"Matlab 2021a 安装与激活","uri":"/posts/install_matlab/#"},{"categories":null,"content":" R2021a安装流程右键装载Matlab910R2021a_Win64.iso镜像文件： 打开安装程序setup.exe 在高级选项中选择我有文件安装密钥 点选是接收许可协议条款，点击下一步 输入安装密钥09806-07443-53955-64350-21751-41297，点击下一步。 密钥 如果是standalone方式，个人使用，填写密钥：09806-07443-53955-64350-21751-41297 如果是Server方式，作为服务器或集群节点，填写密钥：40236-45817-26714-51426-39281 选择许可证文件： 选择要安装的工具包。 安装完毕，关闭即可。 ","date":"2025-04-03","objectID":"/posts/install_matlab/:1:0","series":null,"tags":["matlab"],"title":"Matlab 2021a 安装与激活","uri":"/posts/install_matlab/#r2021a安装流程"},{"categories":null,"content":" R2021a激活流程 拷贝文件夹Matlab910Win中的libmwlmgrimpl.dll文件到R2021a安装位置下的路径\u003cmatlab安装位置\u003e\\bin\\win64\\matlab_startup_plugins\\lmgrimpl中： 拷贝文件夹Matlab910Win中的license.lic文件到R2021a安装位置下的路径 \u003cmatlab安装位置\u003e\\licenses中： 问题： 安装完后，发现开始菜单的图标不能正确显示。 解决： 按照以下操作自行创建开始菜单图标即可。 参考： Robot-G, MATLAB (R2021a) 软件下载和安装教程, https://blog.csdn.net/GGY1102/article/details/121733746 ","date":"2025-04-03","objectID":"/posts/install_matlab/:2:0","series":null,"tags":["matlab"],"title":"Matlab 2021a 安装与激活","uri":"/posts/install_matlab/#r2021a激活流程"},{"categories":null,"content":" R2018安装流程勾选使用文件安装密钥，进入下一步： 勾选是，进入下一步： 输入密钥：09806-07443-53955-64350-21751-41297，进入下一步： 选择安装目录，进入下一步： 按需选择要安装的工具箱： 确认要安装的清单后，点击安装： 程序安装进程： 打开看看效果 ","date":"2025-04-03","objectID":"/posts/install_matlab/:3:0","series":null,"tags":["matlab"],"title":"Matlab 2021a 安装与激活","uri":"/posts/install_matlab/#r2018安装流程"},{"categories":null,"content":" R2018 激活流程（TODO）","date":"2025-04-03","objectID":"/posts/install_matlab/:4:0","series":null,"tags":["matlab"],"title":"Matlab 2021a 安装与激活","uri":"/posts/install_matlab/#r2018-激活流程todo"},{"categories":["技术"],"content":"Generate github token ","date":"2024-10-30","objectID":"/posts/github_token/:0:0","series":null,"tags":["Github","Token"],"title":"Github Token","uri":"/posts/github_token/#"},{"categories":["技术"],"content":" 创建TokenWarning：Token一旦生成，无法再次查看，只能重新生成，所以一定要保存好。 登录Github，点击右上角头像，选择Settings 左侧选择Developer settings 选择Personal access tokens，两种方式： Tokens (classic)：经典版，简单但不能选择特定仓库和权限 点击右上角Generate new token 设置Token名称，选择Token有效期，勾选repo 点击Generate token，生成 token。 token 格式：github_pat_\u003c22位随机字符\u003e_\u003c59位随机字符\u003e Fine-grained tokens：细粒度版，可以针对特定仓库和精细控制权限 点击右上角Generate new token 设置Token名称，选择Token有效期，选择特定仓库或所有仓库 添加权限类别 Contents，并选择 read and write 权限 点击Generate token，生成 token。 token 格式：ghp_\u003c36位随机字母数字串\u003e ","date":"2024-10-30","objectID":"/posts/github_token/:1:0","series":null,"tags":["Github","Token"],"title":"Github Token","uri":"/posts/github_token/#创建token"},{"categories":["软件"],"content":"为了在新系统上能快速恢复工作环境，备份一下相关配置。 ","date":"2024-06-18","objectID":"/posts/windows_envs_backup/:0:0","series":null,"tags":["软件","备份","Windows"],"title":"Windows 自用软件清单","uri":"/posts/windows_envs_backup/#"},{"categories":["软件"],"content":" 软件清单 必备软件 微信，即时通讯 TIM，即时通讯 腾讯会议，会议 网易邮箱大师，邮件客户端 Outlook，Windows 自带邮件客户端 Clash for Windows，科学上网。备用订阅： https://raw.kkgithub.com/ripaojiedian/freenode/main/clash https://ghostcc.cc/ss.cn/cn.ovg https://sub.sharecentre.online/sub V2RayN，科学上网 Folo，类 RSS 信息聚合，开源，AI 总结 Trae，AI 编程 IDE MicroSoft Office 套件：用 OTP 安装，用 HEU_KMS_Activator 激活 方方格子，Excel 插件 TexStudio，LaTeX 集成编辑器 Texlive，LaTeX 编译器 Visio：MicroSoft 流程图工具，可用 OTP 安装 Draw.io，绘图工具 Origin，数据分析和绘图工具 SumatraPDF，PDF 阅读器 Adobe Acrobat DC，PDF 编辑/阅读器 PDF24 Creator，PDF 工具箱，特好用 PDF 补丁丁，有情怀的强大 PDF 编辑工具。半自动制目录、解除限制、替换字体等等。作者的情怀： 阿里云盘，云盘 坚果云，文件同步，版本管理 SyncTrayzor，基于 Syncthing 的开源文件同步工具 ToDesk，远程桌面控制 RustDesk，开源远程桌面控制 CopyTranslator，即时文字多源翻译工具 Bandizip，压缩解压工具 Everything，快速文件搜索 Snipaste，截图贴图 Quicklook，快速预览文件 IDM，多线程下载器 Geek Uninstaller，免费卸载软件，简单够用 BC Uninstaller，开源卸载软件，复杂而强大，支持批量，可查绿色安装软件 VSCode，代码编辑器，扩展性极强 Git，版本控制 Typora，优雅的 Markdown 编辑器（v1.0 后付费） MarkText，（仿Typora）开源 Markdown 编辑器 Flowus 息流，大纲笔记，可上传文件 小书匠，Markdown 编辑器，非常炫酷 洛雪音乐助手，多平台聚合音乐播放器 音源（音源） PotPlayer, 视频播放器 拾光壁纸，干净简介多源壁纸工具 WallHaven，壁纸工具，来自网站 WallHaven EarTrumpet，软件独立音量控制 Twinkle Tray，显示器亮度调节 其他 Quicker，指尖工具箱，快捷操作工具 Listary，快捷文件搜索、路径定位 Q-Dir，多窗口文件管理器 7-Zip，压缩解压工具 FileLocator，快速文件内容搜索 TextSeek，快速文件内容搜索 Beyond Compare，文件对比工具，收费 WinMerge，文件夹/文件对比工具，开源免费 Meld，文件夹/文件对比工具，开源，Win/Mac/Linux BestTrace，网络诊断工具 SwitchHosts，hosts 编辑工具 WireShark，网络抓包工具 MobaXterm，SSH 客户端 SpaceDesk，桌面扩展、手写板、终端摄像头 Attribute Changer，文件属性修改工具 Ant Renamer，文件批量重命名工具 LockHunter，文件锁定解除工具 …… 字体 霞鹜文楷，开源字体 霞鹜臻楷，开源字体，霞鹜文楷的加粗衍生，但不和霞鹜文楷同步更新 江西拙楷，免费字体 更纱黑体，开源字体 …… ","date":"2024-06-18","objectID":"/posts/windows_envs_backup/:0:1","series":null,"tags":["软件","备份","Windows"],"title":"Windows 自用软件清单","uri":"/posts/windows_envs_backup/#软件清单"},{"categories":["软件"],"content":" 软件清单 必备软件 微信，即时通讯 TIM，即时通讯 腾讯会议，会议 网易邮箱大师，邮件客户端 Outlook，Windows 自带邮件客户端 Clash for Windows，科学上网。备用订阅： https://raw.kkgithub.com/ripaojiedian/freenode/main/clash https://ghostcc.cc/ss.cn/cn.ovg https://sub.sharecentre.online/sub V2RayN，科学上网 Folo，类 RSS 信息聚合，开源，AI 总结 Trae，AI 编程 IDE MicroSoft Office 套件：用 OTP 安装，用 HEU_KMS_Activator 激活 方方格子，Excel 插件 TexStudio，LaTeX 集成编辑器 Texlive，LaTeX 编译器 Visio：MicroSoft 流程图工具，可用 OTP 安装 Draw.io，绘图工具 Origin，数据分析和绘图工具 SumatraPDF，PDF 阅读器 Adobe Acrobat DC，PDF 编辑/阅读器 PDF24 Creator，PDF 工具箱，特好用 PDF 补丁丁，有情怀的强大 PDF 编辑工具。半自动制目录、解除限制、替换字体等等。作者的情怀： 阿里云盘，云盘 坚果云，文件同步，版本管理 SyncTrayzor，基于 Syncthing 的开源文件同步工具 ToDesk，远程桌面控制 RustDesk，开源远程桌面控制 CopyTranslator，即时文字多源翻译工具 Bandizip，压缩解压工具 Everything，快速文件搜索 Snipaste，截图贴图 Quicklook，快速预览文件 IDM，多线程下载器 Geek Uninstaller，免费卸载软件，简单够用 BC Uninstaller，开源卸载软件，复杂而强大，支持批量，可查绿色安装软件 VSCode，代码编辑器，扩展性极强 Git，版本控制 Typora，优雅的 Markdown 编辑器（v1.0 后付费） MarkText，（仿Typora）开源 Markdown 编辑器 Flowus 息流，大纲笔记，可上传文件 小书匠，Markdown 编辑器，非常炫酷 洛雪音乐助手，多平台聚合音乐播放器 音源（音源） PotPlayer, 视频播放器 拾光壁纸，干净简介多源壁纸工具 WallHaven，壁纸工具，来自网站 WallHaven EarTrumpet，软件独立音量控制 Twinkle Tray，显示器亮度调节 其他 Quicker，指尖工具箱，快捷操作工具 Listary，快捷文件搜索、路径定位 Q-Dir，多窗口文件管理器 7-Zip，压缩解压工具 FileLocator，快速文件内容搜索 TextSeek，快速文件内容搜索 Beyond Compare，文件对比工具，收费 WinMerge，文件夹/文件对比工具，开源免费 Meld，文件夹/文件对比工具，开源，Win/Mac/Linux BestTrace，网络诊断工具 SwitchHosts，hosts 编辑工具 WireShark，网络抓包工具 MobaXterm，SSH 客户端 SpaceDesk，桌面扩展、手写板、终端摄像头 Attribute Changer，文件属性修改工具 Ant Renamer，文件批量重命名工具 LockHunter，文件锁定解除工具 …… 字体 霞鹜文楷，开源字体 霞鹜臻楷，开源字体，霞鹜文楷的加粗衍生，但不和霞鹜文楷同步更新 江西拙楷，免费字体 更纱黑体，开源字体 …… ","date":"2024-06-18","objectID":"/posts/windows_envs_backup/:0:1","series":null,"tags":["软件","备份","Windows"],"title":"Windows 自用软件清单","uri":"/posts/windows_envs_backup/#必备软件"},{"categories":["软件"],"content":" 软件清单 必备软件 微信，即时通讯 TIM，即时通讯 腾讯会议，会议 网易邮箱大师，邮件客户端 Outlook，Windows 自带邮件客户端 Clash for Windows，科学上网。备用订阅： https://raw.kkgithub.com/ripaojiedian/freenode/main/clash https://ghostcc.cc/ss.cn/cn.ovg https://sub.sharecentre.online/sub V2RayN，科学上网 Folo，类 RSS 信息聚合，开源，AI 总结 Trae，AI 编程 IDE MicroSoft Office 套件：用 OTP 安装，用 HEU_KMS_Activator 激活 方方格子，Excel 插件 TexStudio，LaTeX 集成编辑器 Texlive，LaTeX 编译器 Visio：MicroSoft 流程图工具，可用 OTP 安装 Draw.io，绘图工具 Origin，数据分析和绘图工具 SumatraPDF，PDF 阅读器 Adobe Acrobat DC，PDF 编辑/阅读器 PDF24 Creator，PDF 工具箱，特好用 PDF 补丁丁，有情怀的强大 PDF 编辑工具。半自动制目录、解除限制、替换字体等等。作者的情怀： 阿里云盘，云盘 坚果云，文件同步，版本管理 SyncTrayzor，基于 Syncthing 的开源文件同步工具 ToDesk，远程桌面控制 RustDesk，开源远程桌面控制 CopyTranslator，即时文字多源翻译工具 Bandizip，压缩解压工具 Everything，快速文件搜索 Snipaste，截图贴图 Quicklook，快速预览文件 IDM，多线程下载器 Geek Uninstaller，免费卸载软件，简单够用 BC Uninstaller，开源卸载软件，复杂而强大，支持批量，可查绿色安装软件 VSCode，代码编辑器，扩展性极强 Git，版本控制 Typora，优雅的 Markdown 编辑器（v1.0 后付费） MarkText，（仿Typora）开源 Markdown 编辑器 Flowus 息流，大纲笔记，可上传文件 小书匠，Markdown 编辑器，非常炫酷 洛雪音乐助手，多平台聚合音乐播放器 音源（音源） PotPlayer, 视频播放器 拾光壁纸，干净简介多源壁纸工具 WallHaven，壁纸工具，来自网站 WallHaven EarTrumpet，软件独立音量控制 Twinkle Tray，显示器亮度调节 其他 Quicker，指尖工具箱，快捷操作工具 Listary，快捷文件搜索、路径定位 Q-Dir，多窗口文件管理器 7-Zip，压缩解压工具 FileLocator，快速文件内容搜索 TextSeek，快速文件内容搜索 Beyond Compare，文件对比工具，收费 WinMerge，文件夹/文件对比工具，开源免费 Meld，文件夹/文件对比工具，开源，Win/Mac/Linux BestTrace，网络诊断工具 SwitchHosts，hosts 编辑工具 WireShark，网络抓包工具 MobaXterm，SSH 客户端 SpaceDesk，桌面扩展、手写板、终端摄像头 Attribute Changer，文件属性修改工具 Ant Renamer，文件批量重命名工具 LockHunter，文件锁定解除工具 …… 字体 霞鹜文楷，开源字体 霞鹜臻楷，开源字体，霞鹜文楷的加粗衍生，但不和霞鹜文楷同步更新 江西拙楷，免费字体 更纱黑体，开源字体 …… ","date":"2024-06-18","objectID":"/posts/windows_envs_backup/:0:1","series":null,"tags":["软件","备份","Windows"],"title":"Windows 自用软件清单","uri":"/posts/windows_envs_backup/#其他"},{"categories":["软件"],"content":" 软件清单 必备软件 微信，即时通讯 TIM，即时通讯 腾讯会议，会议 网易邮箱大师，邮件客户端 Outlook，Windows 自带邮件客户端 Clash for Windows，科学上网。备用订阅： https://raw.kkgithub.com/ripaojiedian/freenode/main/clash https://ghostcc.cc/ss.cn/cn.ovg https://sub.sharecentre.online/sub V2RayN，科学上网 Folo，类 RSS 信息聚合，开源，AI 总结 Trae，AI 编程 IDE MicroSoft Office 套件：用 OTP 安装，用 HEU_KMS_Activator 激活 方方格子，Excel 插件 TexStudio，LaTeX 集成编辑器 Texlive，LaTeX 编译器 Visio：MicroSoft 流程图工具，可用 OTP 安装 Draw.io，绘图工具 Origin，数据分析和绘图工具 SumatraPDF，PDF 阅读器 Adobe Acrobat DC，PDF 编辑/阅读器 PDF24 Creator，PDF 工具箱，特好用 PDF 补丁丁，有情怀的强大 PDF 编辑工具。半自动制目录、解除限制、替换字体等等。作者的情怀： 阿里云盘，云盘 坚果云，文件同步，版本管理 SyncTrayzor，基于 Syncthing 的开源文件同步工具 ToDesk，远程桌面控制 RustDesk，开源远程桌面控制 CopyTranslator，即时文字多源翻译工具 Bandizip，压缩解压工具 Everything，快速文件搜索 Snipaste，截图贴图 Quicklook，快速预览文件 IDM，多线程下载器 Geek Uninstaller，免费卸载软件，简单够用 BC Uninstaller，开源卸载软件，复杂而强大，支持批量，可查绿色安装软件 VSCode，代码编辑器，扩展性极强 Git，版本控制 Typora，优雅的 Markdown 编辑器（v1.0 后付费） MarkText，（仿Typora）开源 Markdown 编辑器 Flowus 息流，大纲笔记，可上传文件 小书匠，Markdown 编辑器，非常炫酷 洛雪音乐助手，多平台聚合音乐播放器 音源（音源） PotPlayer, 视频播放器 拾光壁纸，干净简介多源壁纸工具 WallHaven，壁纸工具，来自网站 WallHaven EarTrumpet，软件独立音量控制 Twinkle Tray，显示器亮度调节 其他 Quicker，指尖工具箱，快捷操作工具 Listary，快捷文件搜索、路径定位 Q-Dir，多窗口文件管理器 7-Zip，压缩解压工具 FileLocator，快速文件内容搜索 TextSeek，快速文件内容搜索 Beyond Compare，文件对比工具，收费 WinMerge，文件夹/文件对比工具，开源免费 Meld，文件夹/文件对比工具，开源，Win/Mac/Linux BestTrace，网络诊断工具 SwitchHosts，hosts 编辑工具 WireShark，网络抓包工具 MobaXterm，SSH 客户端 SpaceDesk，桌面扩展、手写板、终端摄像头 Attribute Changer，文件属性修改工具 Ant Renamer，文件批量重命名工具 LockHunter，文件锁定解除工具 …… 字体 霞鹜文楷，开源字体 霞鹜臻楷，开源字体，霞鹜文楷的加粗衍生，但不和霞鹜文楷同步更新 江西拙楷，免费字体 更纱黑体，开源字体 …… ","date":"2024-06-18","objectID":"/posts/windows_envs_backup/:0:1","series":null,"tags":["软件","备份","Windows"],"title":"Windows 自用软件清单","uri":"/posts/windows_envs_backup/#字体"},{"categories":["软件"],"content":" 配置清单 VSCode 插件备份 Path Intelligence Latex Latex Workshop Markdown Markdown All in One Markdown Preview Enhanced Markdown PDF markdownlint PicGo Matlab matlab-formatter Python Python Pylance Python Debugger Jupyter Jupyter Notebook Renderers 美化 One Dark Pro Winter id Coming Theme vscode-icons Better Align Better Comments Color Highlight Bracket Pair Colorizer 2 prettier - Code formatter MS Edge 浏览器扩展清单 MS Edge 浏览器扩展 网站书签MS Edge 备份书签 2025.6.17 ","date":"2024-06-18","objectID":"/posts/windows_envs_backup/:0:2","series":null,"tags":["软件","备份","Windows"],"title":"Windows 自用软件清单","uri":"/posts/windows_envs_backup/#配置清单"},{"categories":["软件"],"content":" 配置清单 VSCode 插件备份 Path Intelligence Latex Latex Workshop Markdown Markdown All in One Markdown Preview Enhanced Markdown PDF markdownlint PicGo Matlab matlab-formatter Python Python Pylance Python Debugger Jupyter Jupyter Notebook Renderers 美化 One Dark Pro Winter id Coming Theme vscode-icons Better Align Better Comments Color Highlight Bracket Pair Colorizer 2 prettier - Code formatter MS Edge 浏览器扩展清单 MS Edge 浏览器扩展 网站书签MS Edge 备份书签 2025.6.17 ","date":"2024-06-18","objectID":"/posts/windows_envs_backup/:0:2","series":null,"tags":["软件","备份","Windows"],"title":"Windows 自用软件清单","uri":"/posts/windows_envs_backup/#vscode-插件备份"},{"categories":["软件"],"content":" 配置清单 VSCode 插件备份 Path Intelligence Latex Latex Workshop Markdown Markdown All in One Markdown Preview Enhanced Markdown PDF markdownlint PicGo Matlab matlab-formatter Python Python Pylance Python Debugger Jupyter Jupyter Notebook Renderers 美化 One Dark Pro Winter id Coming Theme vscode-icons Better Align Better Comments Color Highlight Bracket Pair Colorizer 2 prettier - Code formatter MS Edge 浏览器扩展清单 MS Edge 浏览器扩展 网站书签MS Edge 备份书签 2025.6.17 ","date":"2024-06-18","objectID":"/posts/windows_envs_backup/:0:2","series":null,"tags":["软件","备份","Windows"],"title":"Windows 自用软件清单","uri":"/posts/windows_envs_backup/#ms-edge-浏览器扩展清单"},{"categories":["软件"],"content":" 配置清单 VSCode 插件备份 Path Intelligence Latex Latex Workshop Markdown Markdown All in One Markdown Preview Enhanced Markdown PDF markdownlint PicGo Matlab matlab-formatter Python Python Pylance Python Debugger Jupyter Jupyter Notebook Renderers 美化 One Dark Pro Winter id Coming Theme vscode-icons Better Align Better Comments Color Highlight Bracket Pair Colorizer 2 prettier - Code formatter MS Edge 浏览器扩展清单 MS Edge 浏览器扩展 网站书签MS Edge 备份书签 2025.6.17 ","date":"2024-06-18","objectID":"/posts/windows_envs_backup/:0:2","series":null,"tags":["软件","备份","Windows"],"title":"Windows 自用软件清单","uri":"/posts/windows_envs_backup/#网站书签"},{"categories":null,"content":"记录在 Linux 下，Miniconda3 中配置 PyTorch 环境。 ","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:0:0","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#"},{"categories":null,"content":" 安装 MinicondaMiniconda 官网 ","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:1:0","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#安装-miniconda"},{"categories":null,"content":" 下载安装包 bash wget https://repo.anaconda.com/miniconda/Miniconda3-py310_23.1.0-1-Linux-x86_64.sh ","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:1:1","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#下载安装包"},{"categories":null,"content":" 执行安装 bash bash Miniconda3-py310_23.1.0-1-Linux-x86_64.sh 输入 yes 同意协议；然后 回车 采用默认安装路径，或者手动输入指定的安装路径： 下面询问在打开命令行时是否自动进入 conda 的 base 环境：输入 yes 后回车，然后执行 conda config --set auto_activate_base false 关闭自动初始化。p.s. 这样做可以免去手动添加环境变量的过程。 ","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:1:2","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#执行安装"},{"categories":null,"content":" 添加软件源（频道）为了提高软件包下载速度，我们可以通过以下命令添加镜像软件源： bash # 新加源具有高优先级 conda config --add channels source_url conda config --prepend channels source_url #同上等效 # 新加源具有低优先级 conda config --append channels source_url 执行以下命令，添加清华源： bash conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ 查看源是否添加成功： bash conda config --get channels 参考： [1] 朱渠成, Linux 下 miniconda 的安装使用, https://www.jianshu.com/p/4d4c786ed454 [2] Conda doc, Managing channels, https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html?highlight=priority [3] 普遍语法, 编辑 condarc 编辑 channel 的优先级, https://blog.csdn.net/weixin_45564533/article/details/123012930 ","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:1:3","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#添加软件源频道"},{"categories":null,"content":" 创建 PyTorch 虚拟环境","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:2:0","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#创建-pytorch-虚拟环境"},{"categories":null,"content":" 创建 conda 独立环境 bash conda create -n pt python=3.10 ","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:2:1","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#创建-conda-独立环境"},{"categories":null,"content":" 配置 PyTorch 环境进入创建的环境 pt： bash conda activate pt 通过 PyTorch 官网，选择所需环境，获取安装命令并执行： bash pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu 进入 Python 上下文环境，执行以下命令，如果能输出正确的版本号，则 PyTorch 安装成功： python import torch torch.__version__ 参考： [4] PyTorch 安装命令. https://pytorch.org/get-started/locally/ [5] Hitesh Jethva, LCTT. Linux 系统下查看硬件信息命令大全. https://linux.cn/article-6928-1.html, 命令 inxi -Fx 好使 ","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:2:2","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#配置-pytorch-环境"},{"categories":null,"content":" 常用 Conda 命令","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:3:0","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#常用-conda-命令"},{"categories":null,"content":" 环境管理命令 bash # 创建虚拟环境 conda create --name 环境名 python=3.7 [可以指定其他需要安装的包] # 删除某个环境 conda remove --name 环境名 --all # 列出所有环境 conda env list 或者 conda info --envs # 进入某个环境 conda activate 环境名 # 退出当前环境 conda deactivate # 列出当前环境下安装的包 conda list # 导出环境配置 conda env export \u003e environment.txt # 从配置文件创建新环境 conda ceate --name 环境名 --file environment.txt # 重命名环境（克隆旧环境，删除旧环境） conda create --name 新环境名 --clone 旧环境名 conda env remove --name 旧环境名 ","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:3:1","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#环境管理命令"},{"categories":null,"content":" 源（频道）管理命令 bash ## 添加新的源 # 新加源具有高优先级 conda config --add channels source_url conda config --prepend channels source_url #同上等效 # 新加源具有低优先级 conda config --append channels source_url ## 查看已有的源 conda config --get channels 参考： [6] 朱渠成. miniconda的常用命令汇总. https://www.jianshu.com/p/0e9c88479cfd [7] Fission0102. miniconda 常用命令. https://www.cnblogs.com/Fission0102/p/13998824.html ","date":"2023-03-01","objectID":"/posts/config_linux_server_pytorch/:3:2","series":null,"tags":["Linux","Miniconda","PyTorch"],"title":"Linux 服务器下 PyTorch 环境配置","uri":"/posts/config_linux_server_pytorch/#源频道管理命令"},{"categories":["技术"],"content":"用 Github 仓库作为自用图床；用 PicGo 直接在 Typora 和 VS Code 中一键上传图床、粘贴图链。 ","date":"2022-05-06","objectID":"/posts/github_picture_bed/:0:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#"},{"categories":["技术"],"content":" 搭建Github图床Github仓库支持1G存储容量。 ","date":"2022-05-06","objectID":"/posts/github_picture_bed/:1:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#搭建github图床"},{"categories":["技术"],"content":" 创建Github仓库在Github主页点击New Repository开始创建仓库。 基本设置：仓库名，描述，仓库类型public，勾选Add a README file，其他保持默认即可。然后点击Create repo。 然后网页会自动跳转到我们刚刚创建的仓库主页。我们要在这个仓库下面创建一个文件夹用于以后存放图片（当然不创建文件夹，直接将图片上传到仓库个目录也可以）。点击Add file下的Create new file。 跳转到以下页面，我们按照图中方式依次输入foldername，/，filename，名字自己任取就行。因为这里不支持只创建文件夹，因此需要给出一个文件名。点击Commit new file提交更改。 ","date":"2022-05-06","objectID":"/posts/github_picture_bed/:1:1","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#创建github仓库"},{"categories":["技术"],"content":" 创建repo tokentoken 用于给后面我们用 PicGo 访问仓库并上传图片赋予权限。 首先在自己的头像下点击Settings。 在左侧边栏往下找到并打开Developer settings 如下图，点击左侧边栏Personal access token，然后点击Generate new token 此步因为要赋予权限，因此会弹出窗口验证账号密码，填入后Confirm password即可。 然后就会到以下的 token 设置界面，按照图中所述进行创建即可。 成功生成token后，马上复制下来，之后配置PicGo会用到。 通过以上过程，我们的图床算是搭建完毕了，接下来就要利用 PicGo 实现从本地上传图片，并获取图片链接。 ","date":"2022-05-06","objectID":"/posts/github_picture_bed/:1:2","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#创建repo-token"},{"categories":["技术"],"content":" 配置PicGo官方网站：PicGo。此处下载稳定版本的 PicGo。下载后，按下图安装即可 启动后，直接左键单击托盘图标，打开PicGo设置界面 如下图，左侧展开图床设置，点击Github图床，右侧填入相关设置信息。 以上填写各项的说明： 对于仓库名，分支名，存储路径这几项，我们已经通过前面的步骤创建了，打开如下的仓库主页面，就可以知道。 而对于token，我们前面创建并已经复制了的，粘贴进来就可以。 对于自定义域名， 我们上传图片的Github官方链接是： https://raw.githubusercontent.com/用户名/仓库名@分支名，可以直接通过此链接进行访问。但因为网速问题，我们往往通过 CDN 内容服务器进行访问，相当于是在全球各地建立内容缓存服务器，在访问内容时，能从就近的服务器上快速获取到内容。 使用 jsDilivr 作为 CDN 为 Github 提供加速。只需要按照以下格式填入上面的自定义域名框中就行： ❌https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名 但是，由于cdn.jsdelivr.net遭到 DNS 污染 (Luminous’ Home)，暂将自定义域名更换为： ⭕https://fastly.jsdelivr.net/gh/用户名/仓库名@分支名 或者其他备用： CloudFlare：test1.jsdelivr.net CloudFlare：testingcf.jsdelivr.net Fastly：fastly.jsdelivr.net GCORE：gcore.jsdelivr.net 那么对于我的设置，我这里应该填入的是： https://fastly.jsdelivr.net/gh/wlchenGG/myPictureBed@main 填好以上信息后，点击确定即可设置成功。 我们可以测试一下，在上传区，改为 Github图床，然后上传一张图片，稍作等待，提示上传成功后，将自动复制创建好的链接（这个链接默认为markdown的，后续我们会自定义一下）。 以下是我测试生成的默认markdown格式链接，你可以将其放入markdown文件中测试一下，是一张可正常访问的图片，说明能够正常上传。 ![](https://fastly.jsdelivr.net/gh/wlchenGG/myPictureBed@main/images/wallpaper19.jpg) ","date":"2022-05-06","objectID":"/posts/github_picture_bed/:2:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#配置picgo"},{"categories":["技术"],"content":" 配置Typora打开Typora，按照下图设置。其中第7步选择自己安装PicGo的位置。 此处插入标题 测试一下，在Typora编辑界面，粘贴或者拖入图片时，将自动以Markdown格式插入图片，从链接可以看出图像已经上传。 我们手头已经有很多文档，图片都是本地保存的怎么办呢。只需要完成以上设置后，通过以下选项，就可以将当前文档中的所有本地图片上传到图床中，并会自动将文档中的图片链接全部替换为图床链接。 ","date":"2022-05-06","objectID":"/posts/github_picture_bed/:3:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#配置typora"},{"categories":["技术"],"content":" 自定义链接格式控制图片样式（可选）打开PicGo，按照以下步骤设置 其中，自定义链接的格式（这是一段HTML代码，我们用来美化图片的显示样式。 我们给出如下几种，自行选择所需，将其粘贴到上图4的框中即可。 美化方式 效果图 链接格式 控制大小 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\"/\u003e\u003c/div\u003e 圆角处理 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"border-radius:10px;\"/\u003e\u003c/div\u003e 图片阴影 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\"/\u003e\u003c/div\u003e 阴影+圆角 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;\"/\u003e\u003c/div\u003e 阴影+标题 此处插入标题 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\"/\u003e\u003cbr\u003e\u003cdiv style=\"color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #777; font-size: 90%; padding: 1px;\"\u003e此处插入标题\u003c/div\u003e\u003c/div\u003e 圆角+标题 此处插入标题 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"border-radius:10px;\"/\u003e\u003cbr\u003e\u003cdiv style=\"color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #777; font-size: 90%; padding: 1px;\"\u003e此处插入标题\u003c/div\u003e\u003c/div\u003e 阴影+圆角+标题 此处插入标题 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;\"/\u003e\u003cbr\u003e\u003cdiv style=\"color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #777; font-size: 90%; padding: 1px;\"\u003e此处插入标题\u003c/div\u003e\u003c/div\u003e 其中， width=\"75%\"：控制图片大小，百分比是占整个文档宽度的比例（方便适配不同网页大小），也可以直接写成width=\"300\"等整数用来控制图片的绝对大小。 border-radius:10px;：用来控制圆角大小。 此处插入标题：为图片设置标题。 配置完以上自定义链接格式后，如下图，在PicGo上传界面，选定custom，之后就可以退出PicGo了。 在Typora中，同样是拖入或者粘贴图片时，就会获取以上设置的链接到剪切板中，只需要粘贴到Typora中即可。 这里有一个问题是，Typora 粘贴图片时，始终会默认粘贴Markdown格式的图片链接，如前一小节所示。因此，我们要将Typora自动生成的删除，然后将剪切板中的自定义格式链接粘贴进去即可。如下图所示： ","date":"2022-05-06","objectID":"/posts/github_picture_bed/:4:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#自定义链接格式控制图片样式可选"},{"categories":["技术"],"content":" 配置VS Code","date":"2022-05-06","objectID":"/posts/github_picture_bed/:5:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#配置vs-code"},{"categories":["技术"],"content":" 安装 Pic-Go 插件在 VS Code 中，安装 Pic-Go 插件，安装完成后，如下图所示填入图床配置信息： ","date":"2022-05-06","objectID":"/posts/github_picture_bed/:5:1","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#安装-pic-go-插件"},{"categories":["技术"],"content":" 测试图床在任意打开的 Markdown 文件中，先复制了图片，然后在要插入图片位置按 Ctrl + Alt + P，VS Code 右下角弹窗显示上传成功，当前光标位置生成了图片链接，且能正常显示，则说明配置成功。 注意： 在插入图片时，不要选定 Markdown 文件中的内容，否则 Pic-Go 会处理选定的内容，而不是已经复制到剪切板中的图片。 参考： [1] 从零开始免费搭建自己的博客 (五)——Typora + PicGo + GitHub/Gitee 图床 ","date":"2022-05-06","objectID":"/posts/github_picture_bed/:5:2","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床 PicGo 使用","uri":"/posts/github_picture_bed/#测试图床"},{"categories":["玩乐"],"content":"我去不了火星，但是我的名字可以！ 时隔两年，NASA 的第二次 “Send Your Name to Mars” 浪漫主义火星旅行项目又开始招募游客啦。(～￣▽￣)～ 接下来我们就一起来看看，如何才能拿到开往火星的飞船船票（登机牌）呢？ 首先进入我们的售票大厅：免费领票处 从上看起来是导引前台（导航栏）了，分了5个区，从左到右依次是：名字、登机牌、地图、常客、学习。根据颜色来看，当前应该是处于第一区的名字部分。对于功能大家在心里应该也有个猜测和期待。 好，我们就来看看这几个区具体都是干什么的。 ","date":"2021-12-12","objectID":"/posts/to_mars/:0:0","series":null,"tags":["火星","NASA"],"title":"以我之名，去火星旅行（Send Your Name to Mars）","uri":"/posts/to_mars/#"},{"categories":["玩乐"],"content":" 订票首先可以看见，在名字分区里，映入眼帘的是一个大大的个人信息登记台，看起来需要填写姓名、国家、邮编以及邮箱这几项个人信息。然后往下是针对收集个人信息的隐私保护说明和一个是否需要通过邮箱接收来自NASA的新闻动态通知。再往下，一个显眼的SEND（发送）可谓是再明白不过地告诉我们，点了这个按钮，我们就能开始我们的火星浪漫之旅（在2026年以我们的名字去旅行 ^o^y）。 既然走到这里，我们不妨就做好登记，预定上这趟旅行吧！填上我们的信息： 做完登记，点击SEND提交我们的预定，只见眨眼功夫，我的登机牌就已生成（可以参考下各条信息的位置）： 左联条码信息配着一幅“火星日出图”，水印着“FUTURE MARS MISSION”的计划标识，仿佛昭示着我们此行的希望和对未来的颂扬。 右联中间大写刻着我们所登记的名字，将承载着我们的浪漫与期盼去往这颗红色的星球。名字下方注明了我们此次旅行的出发站点（发射台）和目的地耶泽洛陨石坑。 技巧 P.S. 为了接受来自世界各地的人民，NASA航空公司充分考虑到人名的多样性，对人名并未做限制，这给了一些思维清奇者自由发挥的空间😀。比如我在Last Name处填上姓名落款，First Name处填上一条寄语。妥妥的一封明信片，而且是送往火星的明信片😁。 ","date":"2021-12-12","objectID":"/posts/to_mars/:1:0","series":null,"tags":["火星","NASA"],"title":"以我之名，去火星旅行（Send Your Name to Mars）","uri":"/posts/to_mars/#订票"},{"categories":["玩乐"],"content":" 登机牌即已经预定好登机牌，接下来我们就到登机牌区看看，是不是能够查到我们的登机牌了呢。 填好预定时的信息，点击下面的FIND，就能查到我们的登机牌信息了，可以再次下载、打印或者嵌入网页。 ","date":"2021-12-12","objectID":"/posts/to_mars/:2:0","series":null,"tags":["火星","NASA"],"title":"以我之名，去火星旅行（Send Your Name to Mars）","uri":"/posts/to_mars/#登机牌"},{"categories":["玩乐"],"content":" 地图总算来到地图区了，让我们来看看： 一眼就盯到我们泱泱种花家深沉的颜色，再看右侧的排名，果然咱高居榜首，竟然已经有400多万的先行者👍。在看排行榜底部，截止我的购票日期，这购票人数已达到2000多万。但相对于全球79亿人来说还只是极少数，这么说我们也已经走在了世界前3‰列了呢😄。 ","date":"2021-12-12","objectID":"/posts/to_mars/:3:0","series":null,"tags":["火星","NASA"],"title":"以我之名，去火星旅行（Send Your Name to Mars）","uri":"/posts/to_mars/#地图"},{"categories":["玩乐"],"content":" 常客常客常客，应该是指的第一次的火星之旅吧。我来查一查是否还有曾经的我的名字： 嗯，很棒！2019年预定，2020年7月20日毅力号发射，2021年2月18日登陆耶泽洛陨石坑。 ","date":"2021-12-12","objectID":"/posts/to_mars/:4:0","series":null,"tags":["火星","NASA"],"title":"以我之名，去火星旅行（Send Your Name to Mars）","uri":"/posts/to_mars/#常客"},{"categories":["玩乐"],"content":" 我们的名字在哪里？进入学习区，发现我们的初心。 就在这小小的悬架上面，我们的名字静静地躺着，仰望着满天星河 随着毅力号的前进，我们将看尽日升日出垂落漠，宇宙山川枯银河 几个字节的数据，仿佛牵系着我的灵魂 当我在蓝色星球上彷徨时，会想起在孤寂的红色大地上 有你，在以坚定的意志，探索前进 我们的名字，承载着毅力，在前进！ ","date":"2021-12-12","objectID":"/posts/to_mars/:5:0","series":null,"tags":["火星","NASA"],"title":"以我之名，去火星旅行（Send Your Name to Mars）","uri":"/posts/to_mars/#我们的名字在哪里"},{"categories":null,"content":"思科网络仿真工具 Cisco Packet Tracer 学习系列之一：软件获取及安装。 ","date":"2021-10-12","objectID":"/posts/cisco_packet_tracer_install/:0:0","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/posts/cisco_packet_tracer_install/#"},{"categories":null,"content":" 注册账号在Cisco Packet Tracer填写信息进行注册。 ","date":"2021-10-12","objectID":"/posts/cisco_packet_tracer_install/:1:0","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/posts/cisco_packet_tracer_install/#注册账号"},{"categories":null,"content":" 安装软件","date":"2021-10-12","objectID":"/posts/cisco_packet_tracer_install/:2:0","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/posts/cisco_packet_tracer_install/#安装软件"},{"categories":null,"content":" 下载安装在 Cisco Networking Academy 网页登录账号后，下载 Cisco Packet Tracer 安装包： 打开下载的安装包，执行安装程序： ","date":"2021-10-12","objectID":"/posts/cisco_packet_tracer_install/:2:1","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/posts/cisco_packet_tracer_install/#下载安装"},{"categories":null,"content":" 启动登录启动界面： 首次启动需要登录我们前面注册的 Cisco Networking Academy 账号。此处勾选上Keep me logged in选项，能够3个月免手动登录。 依次输入账号、密码，点击Log in按钮完成登录。 登录后，会自动打开软件主界面，如下： ","date":"2021-10-12","objectID":"/posts/cisco_packet_tracer_install/:2:2","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/posts/cisco_packet_tracer_install/#启动登录"},{"categories":null,"content":" 修改语言下载语言包文件：在列表中找到Simplified Chinese.ptl点击下载。 将下载的语言包文件拷贝到 Cisco Packet Tracer的安装目录（根据自己的安装目录而定）下的language文件夹下： 打开 Cisco Packet Tracer 从菜单上依次点击 Options|Preferences； Translator 框中，选定Simplified Chinese； 点击 Change Language； 弹出框提示\"将在下次打开软件时生效。点OK。 关闭软件并重新打开查看是否修改成功。 搭好环境，下一篇正式开始学习使用。p.s. 下一篇暂无。 ","date":"2021-10-12","objectID":"/posts/cisco_packet_tracer_install/:2:3","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/posts/cisco_packet_tracer_install/#修改语言"},{"categories":null,"content":"应老师要求，把一个 30 多 MB 的 Word 文件压缩到 5MB 以内。一番探索，得出一套通过批量压缩 Word 中图片，以压缩 Word 的方案，记录于此。 精简版： 初步压缩： 打开 Word，任选一张图片-\u003e点菜单栏上格式-\u003e左侧压缩图片-\u003e去掉勾选仅应用于此图片，勾选 96 ppi，点确定，保存文件； 提取图片： 把 Word 文件后缀 docx 改成 zip，然后解压，解压文件夹下路径 word/media 里就是所有的图片了； 批量压缩： 打开iloveimg 批量压缩图片，一次最多 30 张，下载并替换本地图片； 恢复 Word： 把 word/media 下的图片替换成压缩后的图片，然后把整个文件夹压缩成 Zip，再把后缀 Zip 改回 docx 即可。 啰嗦版↓ ","date":"2021-08-20","objectID":"/posts/word%E5%8E%8B%E7%BC%A9/:0:0","series":null,"tags":["Word","压缩"],"title":"Word 压缩","uri":"/posts/word%E5%8E%8B%E7%BC%A9/#"},{"categories":null,"content":" 需求评估 需求现在 10 点，将这个 Word 文件压缩至 5M 以下，12 点前返回。💔 原材料所给文件是 docx 格式的 Word 文档，总大小 35MB；内含 73 张 png 格式截图，每张图占满一页；截图是期刊论文的首页截图，文字内容小且多，要尽量保证清晰。 上个全景图看看😲 分析与准备时间紧，任务重，得高效解决。初步分析，涉及三点： 压缩： 由于文件内文字不多，首先忽略文字占用。那么总共 73 张图片，平均每张图片就得压缩至 68KB 以下。压缩图片来说，倒是有很多网站可以做到的，厉害点的还可以自由调整压缩比、分辨率等。 批量： 压缩能解决了，但文件太多，不可能一张一张的去压缩再替换，既耗时又低效。这种重复工作一定要一定要批量处理。所幸 iloveimg 这个网站也是支持批量处理的，只不过一次处理最多 30 张图片，73张图片处理3次，可以接受。 Word图片导出： 既然批量和压缩都能解决了，但图片还都在 Word 里面呢，总不能一张一张另存为吧。工具软件或者 Word 插件当然是有的，批量提取 Word 中的图片，但一个更朴素的方法当然是 解压 Word 文件 😄。因为 docx格式的 Word 文档基于 OpenXML 标准，而这个标准是基于 Zip 压缩格式的。 ","date":"2021-08-20","objectID":"/posts/word%E5%8E%8B%E7%BC%A9/:0:1","series":null,"tags":["Word","压缩"],"title":"Word 压缩","uri":"/posts/word%E5%8E%8B%E7%BC%A9/#需求评估"},{"categories":null,"content":" 需求评估 需求现在 10 点，将这个 Word 文件压缩至 5M 以下，12 点前返回。💔 原材料所给文件是 docx 格式的 Word 文档，总大小 35MB；内含 73 张 png 格式截图，每张图占满一页；截图是期刊论文的首页截图，文字内容小且多，要尽量保证清晰。 上个全景图看看😲 分析与准备时间紧，任务重，得高效解决。初步分析，涉及三点： 压缩： 由于文件内文字不多，首先忽略文字占用。那么总共 73 张图片，平均每张图片就得压缩至 68KB 以下。压缩图片来说，倒是有很多网站可以做到的，厉害点的还可以自由调整压缩比、分辨率等。 批量： 压缩能解决了，但文件太多，不可能一张一张的去压缩再替换，既耗时又低效。这种重复工作一定要一定要批量处理。所幸 iloveimg 这个网站也是支持批量处理的，只不过一次处理最多 30 张图片，73张图片处理3次，可以接受。 Word图片导出： 既然批量和压缩都能解决了，但图片还都在 Word 里面呢，总不能一张一张另存为吧。工具软件或者 Word 插件当然是有的，批量提取 Word 中的图片，但一个更朴素的方法当然是 解压 Word 文件 😄。因为 docx格式的 Word 文档基于 OpenXML 标准，而这个标准是基于 Zip 压缩格式的。 ","date":"2021-08-20","objectID":"/posts/word%E5%8E%8B%E7%BC%A9/:0:1","series":null,"tags":["Word","压缩"],"title":"Word 压缩","uri":"/posts/word%E5%8E%8B%E7%BC%A9/#需求"},{"categories":null,"content":" 需求评估 需求现在 10 点，将这个 Word 文件压缩至 5M 以下，12 点前返回。💔 原材料所给文件是 docx 格式的 Word 文档，总大小 35MB；内含 73 张 png 格式截图，每张图占满一页；截图是期刊论文的首页截图，文字内容小且多，要尽量保证清晰。 上个全景图看看😲 分析与准备时间紧，任务重，得高效解决。初步分析，涉及三点： 压缩： 由于文件内文字不多，首先忽略文字占用。那么总共 73 张图片，平均每张图片就得压缩至 68KB 以下。压缩图片来说，倒是有很多网站可以做到的，厉害点的还可以自由调整压缩比、分辨率等。 批量： 压缩能解决了，但文件太多，不可能一张一张的去压缩再替换，既耗时又低效。这种重复工作一定要一定要批量处理。所幸 iloveimg 这个网站也是支持批量处理的，只不过一次处理最多 30 张图片，73张图片处理3次，可以接受。 Word图片导出： 既然批量和压缩都能解决了，但图片还都在 Word 里面呢，总不能一张一张另存为吧。工具软件或者 Word 插件当然是有的，批量提取 Word 中的图片，但一个更朴素的方法当然是 解压 Word 文件 😄。因为 docx格式的 Word 文档基于 OpenXML 标准，而这个标准是基于 Zip 压缩格式的。 ","date":"2021-08-20","objectID":"/posts/word%E5%8E%8B%E7%BC%A9/:0:1","series":null,"tags":["Word","压缩"],"title":"Word 压缩","uri":"/posts/word%E5%8E%8B%E7%BC%A9/#原材料"},{"categories":null,"content":" 需求评估 需求现在 10 点，将这个 Word 文件压缩至 5M 以下，12 点前返回。💔 原材料所给文件是 docx 格式的 Word 文档，总大小 35MB；内含 73 张 png 格式截图，每张图占满一页；截图是期刊论文的首页截图，文字内容小且多，要尽量保证清晰。 上个全景图看看😲 分析与准备时间紧，任务重，得高效解决。初步分析，涉及三点： 压缩： 由于文件内文字不多，首先忽略文字占用。那么总共 73 张图片，平均每张图片就得压缩至 68KB 以下。压缩图片来说，倒是有很多网站可以做到的，厉害点的还可以自由调整压缩比、分辨率等。 批量： 压缩能解决了，但文件太多，不可能一张一张的去压缩再替换，既耗时又低效。这种重复工作一定要一定要批量处理。所幸 iloveimg 这个网站也是支持批量处理的，只不过一次处理最多 30 张图片，73张图片处理3次，可以接受。 Word图片导出： 既然批量和压缩都能解决了，但图片还都在 Word 里面呢，总不能一张一张另存为吧。工具软件或者 Word 插件当然是有的，批量提取 Word 中的图片，但一个更朴素的方法当然是 解压 Word 文件 😄。因为 docx格式的 Word 文档基于 OpenXML 标准，而这个标准是基于 Zip 压缩格式的。 ","date":"2021-08-20","objectID":"/posts/word%E5%8E%8B%E7%BC%A9/:0:1","series":null,"tags":["Word","压缩"],"title":"Word 压缩","uri":"/posts/word%E5%8E%8B%E7%BC%A9/#分析与准备"},{"categories":null,"content":" 压缩方案 初步压缩： 先打开 Word，随便选定一张图片，点菜单栏最后的格式栏，点击左侧压缩图片，去掉勾选 仅应用于此图片，勾选 电子邮件 (96 ppi) 的分辨率，点确定，记得保存修改。 提取图片： 把 Word 文件后缀 .docx 改成 zip，然后解压，解压后的文件夹里路径 word/media 下就是所有的图片了； 批量压缩： 用这个网页工具 iloveimg 批量压缩图片，一次最多 30 张图片。一般直接能压缩到 100k 以下，但如果压缩后还是太大，可以再次上传压缩； 恢复 Word： 把 word/media 下的所有图片替换成压缩后的图片，然后把整个文件夹压缩成 zip 格式，再把后缀 zip 改回 docx 即可。 转 pdf： Word 转成 pdf，最好是用 adobe（1. Word 上右键菜单里转换为 Adobe PDF 文件，2. 或者打开 adobe 后 从文件创建 PDF 后，选 Word 文件即可）。Word 自带的导出和另存为大概率导出的 pdf 会比 Word 要大。 ","date":"2021-08-20","objectID":"/posts/word%E5%8E%8B%E7%BC%A9/:0:2","series":null,"tags":["Word","压缩"],"title":"Word 压缩","uri":"/posts/word%E5%8E%8B%E7%BC%A9/#压缩方案"},{"categories":null,"content":" 总结以上方案只能说是手动，更好的当然是能直接一个操作然后实现以上步骤的自动执行。不过目前能力不足，只能到此。 ","date":"2021-08-20","objectID":"/posts/word%E5%8E%8B%E7%BC%A9/:0:3","series":null,"tags":["Word","压缩"],"title":"Word 压缩","uri":"/posts/word%E5%8E%8B%E7%BC%A9/#总结"},{"categories":["软件"],"content":"记录新版 PowerShell 美化过程。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:0","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#"},{"categories":["软件"],"content":" 安装 Windows Terminal可以在微软商店 (Microsoft Store) 搜索 Windows Terminal 安装。 商城搜索结果会有多种版本的Windows Terminal (以下将简称为Terminal)，不知选哪个的话，可直接点击此处链接 Windows Terminal - 微软商店，然后点击获取，弹出框中同意打开电脑的微软商城，跳转到软件主页后，直接安装即可。安装过程无需做任何选项与设置，就像在手机上的软件商城中搜索软件进行安装一样简单。 当然，如果想体验最新功能，可以去官方Github发布页获取最新预览版本：Windows Terminal - Github 安装完后的 Windows Terminal，可以在系统开始菜单找到并打开。先看一下美化前的样子。 美化之前的PowerShell 朴实无华，看着其实也还不错。 可以看到Terminal的多窗口是标签化管理的，大为方便软件内的切换。而菜单栏上右侧的 +号可以快速开启一个默认类型的窗口。﹀下拉菜单可以选择各类终端窗口。 然后看一下终端显示的内容。因为要美化的是PowerShell，我便打开了一个Windows PowerShell窗口，键入命令 $PSVersionTable后回车，可以看到当前PowerShell的版本号为5.1，仍然是老版本。之后我们要将其换成 开源跨平台的船新版本。请看下文~ ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#安装-windows-terminal"},{"categories":["软件"],"content":" 安装 PowerShell (更新) 从 Microsoft Store 安装微软商城搜索 PowerShell Preview ，安装即可。官方渠道，可以自动更新，无需重复配置环境。 安装完成后，重新打开 Terminal。 从 Github 下载安装采用此种方式的话，之后需要自己手动下载新版本安装包，并重新进行后续的美化配置。 船新版本在哪里？当然看准官方发布渠道，我选了最新预览版：PowerShell 可以观察到，曾经的PowerShell 全名为 Windows PowerShell，但是现在去掉了前面的Windows，只留PowerShell一词；另外发布页的 Assets中也确实提供了各种平台的版本。这无疑是名副其实的跨平台了。 言归正传，从上面官方发布页中，我选择了 7.2.0-preview-win-x64 版本的msi安装包。下载下来安装包后，直接双击运行，会经历以下步骤，最后还有一个对话框点击install即可。 这个船新版本的船新 Logo 灰常 Cyber 的说。 添加 PowerShell 到 Terminal 如果前面从Microsoft Store安装的PowerShell，一般会自动添加到 Temianl 中。如果没有的话，按照下面步骤自行添加即可。 打开 Terminal，点开菜单栏右侧下拉菜单，点击设置；或者直接按快捷键 Ctrl + ,，调出设置界面，按照下图步骤添加我们安装的 PowerShell 到Terminal中： 从 Microsoft Store 安装的 PowerShell，安装目录为：\"C:\\Users\\用户名\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.PowerShellPreview_8wekyb3d8bbwe\\pwsh.exe\"，将此目录添加到上图的命令行位置即可。 注意添加完后，点击保存。 Terminal无需重启即可即时更新配置，从下拉菜单中看到 PowerShell 7 已经添加成功。 下面开始我们的美化之路。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:2","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#安装-powershell"},{"categories":["软件"],"content":" 安装 PowerShell (更新) 从 Microsoft Store 安装微软商城搜索 PowerShell Preview ，安装即可。官方渠道，可以自动更新，无需重复配置环境。 安装完成后，重新打开 Terminal。 从 Github 下载安装采用此种方式的话，之后需要自己手动下载新版本安装包，并重新进行后续的美化配置。 船新版本在哪里？当然看准官方发布渠道，我选了最新预览版：PowerShell 可以观察到，曾经的PowerShell 全名为 Windows PowerShell，但是现在去掉了前面的Windows，只留PowerShell一词；另外发布页的 Assets中也确实提供了各种平台的版本。这无疑是名副其实的跨平台了。 言归正传，从上面官方发布页中，我选择了 7.2.0-preview-win-x64 版本的msi安装包。下载下来安装包后，直接双击运行，会经历以下步骤，最后还有一个对话框点击install即可。 这个船新版本的船新 Logo 灰常 Cyber 的说。 添加 PowerShell 到 Terminal 如果前面从Microsoft Store安装的PowerShell，一般会自动添加到 Temianl 中。如果没有的话，按照下面步骤自行添加即可。 打开 Terminal，点开菜单栏右侧下拉菜单，点击设置；或者直接按快捷键 Ctrl + ,，调出设置界面，按照下图步骤添加我们安装的 PowerShell 到Terminal中： 从 Microsoft Store 安装的 PowerShell，安装目录为：\"C:\\Users\\用户名\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.PowerShellPreview_8wekyb3d8bbwe\\pwsh.exe\"，将此目录添加到上图的命令行位置即可。 注意添加完后，点击保存。 Terminal无需重启即可即时更新配置，从下拉菜单中看到 PowerShell 7 已经添加成功。 下面开始我们的美化之路。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:2","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#更新-从-microsoft-store-安装"},{"categories":["软件"],"content":" 安装 PowerShell (更新) 从 Microsoft Store 安装微软商城搜索 PowerShell Preview ，安装即可。官方渠道，可以自动更新，无需重复配置环境。 安装完成后，重新打开 Terminal。 从 Github 下载安装采用此种方式的话，之后需要自己手动下载新版本安装包，并重新进行后续的美化配置。 船新版本在哪里？当然看准官方发布渠道，我选了最新预览版：PowerShell 可以观察到，曾经的PowerShell 全名为 Windows PowerShell，但是现在去掉了前面的Windows，只留PowerShell一词；另外发布页的 Assets中也确实提供了各种平台的版本。这无疑是名副其实的跨平台了。 言归正传，从上面官方发布页中，我选择了 7.2.0-preview-win-x64 版本的msi安装包。下载下来安装包后，直接双击运行，会经历以下步骤，最后还有一个对话框点击install即可。 这个船新版本的船新 Logo 灰常 Cyber 的说。 添加 PowerShell 到 Terminal 如果前面从Microsoft Store安装的PowerShell，一般会自动添加到 Temianl 中。如果没有的话，按照下面步骤自行添加即可。 打开 Terminal，点开菜单栏右侧下拉菜单，点击设置；或者直接按快捷键 Ctrl + ,，调出设置界面，按照下图步骤添加我们安装的 PowerShell 到Terminal中： 从 Microsoft Store 安装的 PowerShell，安装目录为：\"C:\\Users\\用户名\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.PowerShellPreview_8wekyb3d8bbwe\\pwsh.exe\"，将此目录添加到上图的命令行位置即可。 注意添加完后，点击保存。 Terminal无需重启即可即时更新配置，从下拉菜单中看到 PowerShell 7 已经添加成功。 下面开始我们的美化之路。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:2","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#从-github-下载安装"},{"categories":["软件"],"content":" 安装 PowerShell (更新) 从 Microsoft Store 安装微软商城搜索 PowerShell Preview ，安装即可。官方渠道，可以自动更新，无需重复配置环境。 安装完成后，重新打开 Terminal。 从 Github 下载安装采用此种方式的话，之后需要自己手动下载新版本安装包，并重新进行后续的美化配置。 船新版本在哪里？当然看准官方发布渠道，我选了最新预览版：PowerShell 可以观察到，曾经的PowerShell 全名为 Windows PowerShell，但是现在去掉了前面的Windows，只留PowerShell一词；另外发布页的 Assets中也确实提供了各种平台的版本。这无疑是名副其实的跨平台了。 言归正传，从上面官方发布页中，我选择了 7.2.0-preview-win-x64 版本的msi安装包。下载下来安装包后，直接双击运行，会经历以下步骤，最后还有一个对话框点击install即可。 这个船新版本的船新 Logo 灰常 Cyber 的说。 添加 PowerShell 到 Terminal 如果前面从Microsoft Store安装的PowerShell，一般会自动添加到 Temianl 中。如果没有的话，按照下面步骤自行添加即可。 打开 Terminal，点开菜单栏右侧下拉菜单，点击设置；或者直接按快捷键 Ctrl + ,，调出设置界面，按照下图步骤添加我们安装的 PowerShell 到Terminal中： 从 Microsoft Store 安装的 PowerShell，安装目录为：\"C:\\Users\\用户名\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.PowerShellPreview_8wekyb3d8bbwe\\pwsh.exe\"，将此目录添加到上图的命令行位置即可。 注意添加完后，点击保存。 Terminal无需重启即可即时更新配置，从下拉菜单中看到 PowerShell 7 已经添加成功。 下面开始我们的美化之路。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:2","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#添加-powershell-到-terminal"},{"categories":["软件"],"content":" 美化 PowerShell 安装 on-my-posh方法一：（更新）直接在 Microsoft Store 中搜索 oh-my-posh 并安装。 方法二：打开 Terminal，然后打开一个 PowerShell 窗口。命令行中执行以下命令安装 oh-my-posh 模块： powershell Install-Module oh-my-posh -Scope CurrentUser 设置主题安装完成后，执行 Get-PoshThemes 命令，将以各自主题的样式列出支持的主题。 其中有一些乱码，这实际是一些图标，需要安装字体包来提供图标支持，具体方法后续给出。 先进行主题设置。选择主题可以从以上命令的返回结果中选择自己中意的，然后执行以下命令就能进行安装： powershell Set-PoshPrompt -Theme 主题名字 我们需要配置 PowerShell 的启动脚本，以使主题永久生效。执行以下命令打开脚本文件。若提示文件不存在，则同意创建。 powershell notepad $Profile 然后在打开的脚本文件中输入以下命令： powershell Import-Module oh-my-posh Set-PoshPrompt -Theme agnosterplus # 此处将agnosterplus替换为自己选主题名即可 如果从 Microsoft Store 安装的 oh-my-posh，则在以上脚本文件中输入以下命令： powershell oh-my-posh init pwsh --config \"$env:POSH_THEMES_PATH\\agnosterplus.omp.json\" | Invoke-Expression # 此处将agnosterplus替换为自己选的主题即可 之后重启即可看到效果。 设置字体为了对主题所需的图标符号提供支持，需要 Nerd Fonts 类字体，可以到字体集合主页Nerd Fonts 挑选喜欢的字体，可以预览字体效果。选好后直接下载字体文件即可。 经过一番查看，我最终凭感觉选择了Go Mono。 将下载的压缩包直接解压缩后，是一套字体文件，由于不需要其他用途，此处只安装正体的字体。选择不带Bold（加粗）不带Italic（斜体）的Windows Compatible字体文件，直接双击安装。 弹出的对话窗口，展示了字体样式，直接点击左上角安装即可。 字体已经安装好，接下来在 Terminal 下按Ctrl + ,打开设置，从左侧配置文件中选择到自己新建的PowerShell，我的是 PowerShell 7 ，然后右侧选择外观选项卡，找到字体下拉菜单，选择自己所选的字体名字即可，我的为 GoMono NF。 字体名可以从系统字体设置查看到，开始-\u003e设置-\u003e搜索字体设置-\u003e搜索字体关键字’GoMono’。可以看到我的字体名为GoMono NF。记住这个字体名，之后 VS Code 的终端 PowerShell 配置中会再次用到。 设置背景图只需打开 Terminal 的设置，从左侧配置文件中选择到自己新建的PowerShell，然后右侧选择外观选项卡，找到背景图像设置项，浏览选择图片。选好图片后，下面会多出一些针对背景图的设置，包括模糊、透明、位置等，可以自行调整。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:3","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#美化-powershell"},{"categories":["软件"],"content":" 美化 PowerShell 安装 on-my-posh方法一：（更新）直接在 Microsoft Store 中搜索 oh-my-posh 并安装。 方法二：打开 Terminal，然后打开一个 PowerShell 窗口。命令行中执行以下命令安装 oh-my-posh 模块： powershell Install-Module oh-my-posh -Scope CurrentUser 设置主题安装完成后，执行 Get-PoshThemes 命令，将以各自主题的样式列出支持的主题。 其中有一些乱码，这实际是一些图标，需要安装字体包来提供图标支持，具体方法后续给出。 先进行主题设置。选择主题可以从以上命令的返回结果中选择自己中意的，然后执行以下命令就能进行安装： powershell Set-PoshPrompt -Theme 主题名字 我们需要配置 PowerShell 的启动脚本，以使主题永久生效。执行以下命令打开脚本文件。若提示文件不存在，则同意创建。 powershell notepad $Profile 然后在打开的脚本文件中输入以下命令： powershell Import-Module oh-my-posh Set-PoshPrompt -Theme agnosterplus # 此处将agnosterplus替换为自己选主题名即可 如果从 Microsoft Store 安装的 oh-my-posh，则在以上脚本文件中输入以下命令： powershell oh-my-posh init pwsh --config \"$env:POSH_THEMES_PATH\\agnosterplus.omp.json\" | Invoke-Expression # 此处将agnosterplus替换为自己选的主题即可 之后重启即可看到效果。 设置字体为了对主题所需的图标符号提供支持，需要 Nerd Fonts 类字体，可以到字体集合主页Nerd Fonts 挑选喜欢的字体，可以预览字体效果。选好后直接下载字体文件即可。 经过一番查看，我最终凭感觉选择了Go Mono。 将下载的压缩包直接解压缩后，是一套字体文件，由于不需要其他用途，此处只安装正体的字体。选择不带Bold（加粗）不带Italic（斜体）的Windows Compatible字体文件，直接双击安装。 弹出的对话窗口，展示了字体样式，直接点击左上角安装即可。 字体已经安装好，接下来在 Terminal 下按Ctrl + ,打开设置，从左侧配置文件中选择到自己新建的PowerShell，我的是 PowerShell 7 ，然后右侧选择外观选项卡，找到字体下拉菜单，选择自己所选的字体名字即可，我的为 GoMono NF。 字体名可以从系统字体设置查看到，开始-\u003e设置-\u003e搜索字体设置-\u003e搜索字体关键字’GoMono’。可以看到我的字体名为GoMono NF。记住这个字体名，之后 VS Code 的终端 PowerShell 配置中会再次用到。 设置背景图只需打开 Terminal 的设置，从左侧配置文件中选择到自己新建的PowerShell，然后右侧选择外观选项卡，找到背景图像设置项，浏览选择图片。选好图片后，下面会多出一些针对背景图的设置，包括模糊、透明、位置等，可以自行调整。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:3","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#安装-on-my-posh"},{"categories":["软件"],"content":" 美化 PowerShell 安装 on-my-posh方法一：（更新）直接在 Microsoft Store 中搜索 oh-my-posh 并安装。 方法二：打开 Terminal，然后打开一个 PowerShell 窗口。命令行中执行以下命令安装 oh-my-posh 模块： powershell Install-Module oh-my-posh -Scope CurrentUser 设置主题安装完成后，执行 Get-PoshThemes 命令，将以各自主题的样式列出支持的主题。 其中有一些乱码，这实际是一些图标，需要安装字体包来提供图标支持，具体方法后续给出。 先进行主题设置。选择主题可以从以上命令的返回结果中选择自己中意的，然后执行以下命令就能进行安装： powershell Set-PoshPrompt -Theme 主题名字 我们需要配置 PowerShell 的启动脚本，以使主题永久生效。执行以下命令打开脚本文件。若提示文件不存在，则同意创建。 powershell notepad $Profile 然后在打开的脚本文件中输入以下命令： powershell Import-Module oh-my-posh Set-PoshPrompt -Theme agnosterplus # 此处将agnosterplus替换为自己选主题名即可 如果从 Microsoft Store 安装的 oh-my-posh，则在以上脚本文件中输入以下命令： powershell oh-my-posh init pwsh --config \"$env:POSH_THEMES_PATH\\agnosterplus.omp.json\" | Invoke-Expression # 此处将agnosterplus替换为自己选的主题即可 之后重启即可看到效果。 设置字体为了对主题所需的图标符号提供支持，需要 Nerd Fonts 类字体，可以到字体集合主页Nerd Fonts 挑选喜欢的字体，可以预览字体效果。选好后直接下载字体文件即可。 经过一番查看，我最终凭感觉选择了Go Mono。 将下载的压缩包直接解压缩后，是一套字体文件，由于不需要其他用途，此处只安装正体的字体。选择不带Bold（加粗）不带Italic（斜体）的Windows Compatible字体文件，直接双击安装。 弹出的对话窗口，展示了字体样式，直接点击左上角安装即可。 字体已经安装好，接下来在 Terminal 下按Ctrl + ,打开设置，从左侧配置文件中选择到自己新建的PowerShell，我的是 PowerShell 7 ，然后右侧选择外观选项卡，找到字体下拉菜单，选择自己所选的字体名字即可，我的为 GoMono NF。 字体名可以从系统字体设置查看到，开始-\u003e设置-\u003e搜索字体设置-\u003e搜索字体关键字’GoMono’。可以看到我的字体名为GoMono NF。记住这个字体名，之后 VS Code 的终端 PowerShell 配置中会再次用到。 设置背景图只需打开 Terminal 的设置，从左侧配置文件中选择到自己新建的PowerShell，然后右侧选择外观选项卡，找到背景图像设置项，浏览选择图片。选好图片后，下面会多出一些针对背景图的设置，包括模糊、透明、位置等，可以自行调整。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:3","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#设置主题"},{"categories":["软件"],"content":" 美化 PowerShell 安装 on-my-posh方法一：（更新）直接在 Microsoft Store 中搜索 oh-my-posh 并安装。 方法二：打开 Terminal，然后打开一个 PowerShell 窗口。命令行中执行以下命令安装 oh-my-posh 模块： powershell Install-Module oh-my-posh -Scope CurrentUser 设置主题安装完成后，执行 Get-PoshThemes 命令，将以各自主题的样式列出支持的主题。 其中有一些乱码，这实际是一些图标，需要安装字体包来提供图标支持，具体方法后续给出。 先进行主题设置。选择主题可以从以上命令的返回结果中选择自己中意的，然后执行以下命令就能进行安装： powershell Set-PoshPrompt -Theme 主题名字 我们需要配置 PowerShell 的启动脚本，以使主题永久生效。执行以下命令打开脚本文件。若提示文件不存在，则同意创建。 powershell notepad $Profile 然后在打开的脚本文件中输入以下命令： powershell Import-Module oh-my-posh Set-PoshPrompt -Theme agnosterplus # 此处将agnosterplus替换为自己选主题名即可 如果从 Microsoft Store 安装的 oh-my-posh，则在以上脚本文件中输入以下命令： powershell oh-my-posh init pwsh --config \"$env:POSH_THEMES_PATH\\agnosterplus.omp.json\" | Invoke-Expression # 此处将agnosterplus替换为自己选的主题即可 之后重启即可看到效果。 设置字体为了对主题所需的图标符号提供支持，需要 Nerd Fonts 类字体，可以到字体集合主页Nerd Fonts 挑选喜欢的字体，可以预览字体效果。选好后直接下载字体文件即可。 经过一番查看，我最终凭感觉选择了Go Mono。 将下载的压缩包直接解压缩后，是一套字体文件，由于不需要其他用途，此处只安装正体的字体。选择不带Bold（加粗）不带Italic（斜体）的Windows Compatible字体文件，直接双击安装。 弹出的对话窗口，展示了字体样式，直接点击左上角安装即可。 字体已经安装好，接下来在 Terminal 下按Ctrl + ,打开设置，从左侧配置文件中选择到自己新建的PowerShell，我的是 PowerShell 7 ，然后右侧选择外观选项卡，找到字体下拉菜单，选择自己所选的字体名字即可，我的为 GoMono NF。 字体名可以从系统字体设置查看到，开始-\u003e设置-\u003e搜索字体设置-\u003e搜索字体关键字’GoMono’。可以看到我的字体名为GoMono NF。记住这个字体名，之后 VS Code 的终端 PowerShell 配置中会再次用到。 设置背景图只需打开 Terminal 的设置，从左侧配置文件中选择到自己新建的PowerShell，然后右侧选择外观选项卡，找到背景图像设置项，浏览选择图片。选好图片后，下面会多出一些针对背景图的设置，包括模糊、透明、位置等，可以自行调整。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:3","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#设置字体"},{"categories":["软件"],"content":" 美化 PowerShell 安装 on-my-posh方法一：（更新）直接在 Microsoft Store 中搜索 oh-my-posh 并安装。 方法二：打开 Terminal，然后打开一个 PowerShell 窗口。命令行中执行以下命令安装 oh-my-posh 模块： powershell Install-Module oh-my-posh -Scope CurrentUser 设置主题安装完成后，执行 Get-PoshThemes 命令，将以各自主题的样式列出支持的主题。 其中有一些乱码，这实际是一些图标，需要安装字体包来提供图标支持，具体方法后续给出。 先进行主题设置。选择主题可以从以上命令的返回结果中选择自己中意的，然后执行以下命令就能进行安装： powershell Set-PoshPrompt -Theme 主题名字 我们需要配置 PowerShell 的启动脚本，以使主题永久生效。执行以下命令打开脚本文件。若提示文件不存在，则同意创建。 powershell notepad $Profile 然后在打开的脚本文件中输入以下命令： powershell Import-Module oh-my-posh Set-PoshPrompt -Theme agnosterplus # 此处将agnosterplus替换为自己选主题名即可 如果从 Microsoft Store 安装的 oh-my-posh，则在以上脚本文件中输入以下命令： powershell oh-my-posh init pwsh --config \"$env:POSH_THEMES_PATH\\agnosterplus.omp.json\" | Invoke-Expression # 此处将agnosterplus替换为自己选的主题即可 之后重启即可看到效果。 设置字体为了对主题所需的图标符号提供支持，需要 Nerd Fonts 类字体，可以到字体集合主页Nerd Fonts 挑选喜欢的字体，可以预览字体效果。选好后直接下载字体文件即可。 经过一番查看，我最终凭感觉选择了Go Mono。 将下载的压缩包直接解压缩后，是一套字体文件，由于不需要其他用途，此处只安装正体的字体。选择不带Bold（加粗）不带Italic（斜体）的Windows Compatible字体文件，直接双击安装。 弹出的对话窗口，展示了字体样式，直接点击左上角安装即可。 字体已经安装好，接下来在 Terminal 下按Ctrl + ,打开设置，从左侧配置文件中选择到自己新建的PowerShell，我的是 PowerShell 7 ，然后右侧选择外观选项卡，找到字体下拉菜单，选择自己所选的字体名字即可，我的为 GoMono NF。 字体名可以从系统字体设置查看到，开始-\u003e设置-\u003e搜索字体设置-\u003e搜索字体关键字’GoMono’。可以看到我的字体名为GoMono NF。记住这个字体名，之后 VS Code 的终端 PowerShell 配置中会再次用到。 设置背景图只需打开 Terminal 的设置，从左侧配置文件中选择到自己新建的PowerShell，然后右侧选择外观选项卡，找到背景图像设置项，浏览选择图片。选好图片后，下面会多出一些针对背景图的设置，包括模糊、透明、位置等，可以自行调整。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:3","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#设置背景图"},{"categories":["软件"],"content":" VS Code 集成 PowerShellVS Code 内按快捷键 Ctrl + Shift + `，则在编辑窗口下面会打开一个（默认CMD）终端窗口。VS Code中已经自动集成了 CMD 和 Windows PowerShell。但我需要：1. 将新版的 PowerShell Preview 集成进来；2. 将其设置为默认打开；3. 更改终端字体，以提供主题包支持。 首先Ctrl + ,打开设置，然后搜索Terminal，找到Terminal \u003e Integrated \u003e Profiles: Windows的项，点击下面的在settings.json中编辑。 之后在打开的settings.json文件下，在terminal.integrated.profiles.windows项内按照以下红色框中代码的格式添加自己的 PowerShell 条目，其中的PowerShell 7 pre替换为自拟名字即可，path项内的路径替换为自己的 PowerShell 安装路径。然后保存并关闭文件。 如果是从Microsoft Store安装的 PowserShell，上图中的 path 字段为：\"C:\\Users\\用户名\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.PowerShellPreview_8wekyb3d8bbwe\\pwsh.exe\" 通过以上操作，我们已经为终端窗口添加了新的 PowerShell。接下来将其设置为默认打开。 仍然Ctrl + ,打开设置，搜索Terminal，找到Terminal \u003e Integrated \u003e Default Profile: Windows项，下拉选项中选择我们上一步添加的 PowerShell 的名字PowerShell 7 pre。 在设置页，搜索Terminal Font，找到Terminal \u003e Integrated \u003e Font Family项，将其值设置为我们前面安装的字体文件名 GoMono NF，由于我选的这款字体本身字号挺大，所以我还将字号改为了 12。 经过以上配置，最终的效果如下图。 ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:4","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#vs-code-集成-powershell"},{"categories":["软件"],"content":" 参考 PowerShell 美化 - j3rry Nerd Fonts oh-my-push 文档 Using Visual Studio Code for PowerShell Development - Microsoft VS Code Integrated Terminal 再谈 Windows Terminal (终端) 主题和字体美化，Oh-My-Posh、Terminal-Icons、Posh-git Windows Terminal 美化 (oh-my-posh) ","date":"2021-08-19","objectID":"/posts/powershell%E7%BE%8E%E5%8C%96/:0:5","series":null,"tags":["PowerShell","Terminal"],"title":"PowerShell 美化","uri":"/posts/powershell%E7%BE%8E%E5%8C%96/#参考"},{"categories":["技术"],"content":"最近因为汇总论文成果，需要提取论文的首页。虽然 Acrobat 提供了页面组织功能可以任意提取，但手动操作一次只能处理一个文件。当面对好几十篇论文时，尚未开始就已经放弃。 工欲善其事必先利其器，决定造个工具，一劳永逸提高效率。 以下代码基于 小白程序猿 的方案，面向我自己的需求作了一些调整适配，在此致谢🫡 插播推荐 PDF 补丁丁 一个满满情怀的 PDF 神器：PDF 补丁丁，已开源在PDFPatcher，三方长文教程：免费了 12 年的神器开源了，你可能不知道它有多强大 ","date":"2021-08-13","objectID":"/posts/pdftoolbox/:0:0","series":null,"tags":["PDF","Python"],"title":"基于 Python 批量提取 PDF 首页","uri":"/posts/pdftoolbox/#"},{"categories":["技术"],"content":" 环境与原料 Python PyMuPDF模块 bash pip install PyMuPDF ","date":"2021-08-13","objectID":"/posts/pdftoolbox/:1:0","series":null,"tags":["PDF","Python"],"title":"基于 Python 批量提取 PDF 首页","uri":"/posts/pdftoolbox/#环境与原料"},{"categories":["技术"],"content":" 工具代码以下为完整代码： python # coding:utf-8 import os import fitz # 解析 # 函数将file_path中所有文件（包括子目录中的文件），处理后，按照原目录保存到save_path下。 # 即save_path下的文件夹结构和file_path一致。 def analysis(file_path, save_path, num, toimg): # 资源列表 file_array = [] if os.path.isdir(file_path): # 目录循环压入 file_count = get_path_file(file_path) for v in file_count: file_array.append(v) else: # 单文件，单次调用 file_array.append(file_path) # 判断为空情况 if not file_array: print(\"此目录下无文件\") # 执行解析 file_count_num = len(file_array) print(\"程序运行中，共计%s个文件\" % file_count_num) success_num = file_count_num failed_file_array = [] for v in file_array: print(\"原文件路径：%s\" % v) # 获取文件名称及类型 file_name = os.path.basename(v) # print(\"文件信息：%s\" % file_name) if '.pdf' not in file_name: print(\"此文件非PDF文件，跳过\") failed_file_array.append(\"非 PDF文件：\" + file_name) success_num = success_num - 1 continue # 打开PDF文件，生成一个对象 doc = fitz.open(v) # 总页数 count_page = doc.pageCount # print(\"文件共计：%s页\" % count_page) if toimg == False: # 仅提取页面 if count_page \u003e 1: doc2 = fitz.open() # 创建新的空PDF doc2.insert_pdf(doc, to_page = num) # 提取doc的第1页到doc2 # 创建子目录 p_1 = v.replace(file_path, save_path) p_2 = p_1.replace(file_name, '') if not os.path.exists(p_2): os.makedirs(p_2) print(\"提取到路径：\" + p_2 + file_name) doc2.save(p_2 + file_name) # 保存提取出的PDF文件 print(\"提取完成\") else: print(\"此文档无内容，跳过\") failed_file_array.append(\"文件无内容：\" + file_name) success_num = success_num - 1 continue else: # 将页面转换为图片 if count_page \u003e 1: page = doc[num] rotate = int(0) # 每个尺寸的缩放系数为2，这将为我们生成分辨率提高四倍的图像。 zoom_x = 2.0 zoom_y = 2.0 trans = fitz.Matrix(zoom_x, zoom_y).preRotate(rotate) pm = page.getPixmap(matrix=trans, alpha=False) # 保存路径 # 创建子目录 p_1 = v.replace(file_path, save_path) p_2 = p_1.replace(file_name, '') if not os.path.exists(p_2): os.makedirs(p_2) new_file_name = file_name.replace(\".pdf\", \"\") print(\"提取到路径：\" + p_2 + '%s.png' % new_file_name) pm.writePNG(p_2 + '%s.png' % new_file_name) print(\"提取并转换为图片完成\") else: print(\"此文档无内容，跳过\") failed_file_array.append(file_name) success_num = success_num - 1 continue print(\"\\n\\n合计 %d 个文件提取成功，以下文件提取失败：\" % success_num) for f in failed_file_array: print(f) # 返回目录下所有文件 def get_path_file(files_path): data = [] for root, dirs, files in os.walk(files_path, topdown=False): for name in files: f_p = os.path.join(root, name).replace(\"\\\\\", \"/\") data.append(f_p) return data # 规范路径的斜杠格式 def uni_path(path: str) -\u003e str: # return path.replace(r'\\/'.replace(os.sep, ''), os.sep) # 转换为当前系统的格式 return path.replace(\"\\\\\\\\\",\"/\").replace(\"\\\\\",\"/\") # 统一转换为unix格式 if __name__ == '__main__': print(\"|---------------------------------|\") print(\"|++++++++ PDF处理工具箱 ++++++++|\") print(\"|---------------------------------|\") print(\"| |\") print(\"| 1. PDF 批量提取首页 |\") print(\"| 2. PDF 批量提取首页并转换为图片 |\") print(\"| |\") print(\"|---------------------------------|\") # 选择处理方式 toimg = False choice = input(\"请输入要执行操作的编号：\") if choice == '1': toimg = False elif choice == '2': toimg =True # 当前目录下的文件 now_path = os.getcwd() print(\"当前位置：%s\" % now_path) # 保存路径 print(\"请输入参数，以 / 结尾\") save_path = input(\"提取文件保存地址:\") # 判断目录 save_path_status = os.path.exists(save_path) if not save_path_status: os.mkdir(save_path) # 截取页数 num = 0 # 截取第一页 # 路径或文件名 file_path = input(\"待处理PDF文件地址:\") # 调用方法 analysis(uni_path(file_path), uni_path(save_path), num, toimg) ","date":"2021-08-13","objectID":"/posts/pdftoolbox/:2:0","series":null,"tags":["PDF","Python"],"title":"基于 Python 批量提取 PDF 首页","uri":"/posts/pdftoolbox/#工具代码"},{"categories":["技术"],"content":" 参考Python 提取 PDF 第一页为封面图片【批量提取】 Python 把任意系统的路径转换成当前系统的格式（关于 / \\ 分隔符的） python中os.walk的用法 python PyMuPDF(fitz)包中insert_pdf的用法 ","date":"2021-08-13","objectID":"/posts/pdftoolbox/:3:0","series":null,"tags":["PDF","Python"],"title":"基于 Python 批量提取 PDF 首页","uri":"/posts/pdftoolbox/#参考"},{"categories":null,"content":"记录基于Hugo静态博客建站工具 和LoveIt主题（已换成衍生的DoIt）的个人博客过程，作为备忘。VS Code作为博客编辑、站点部署集成环境，站点维护仍然采用Github Pages。 LoveIt 换成 DoIt 由于 LoveIt 原作者已长期未维护，HEIGE-PCloud 基于 LoveIt 的新主题DoIt主题，并维持着更新。致敬∠(°ゝ°)。 DoIt 的安装配置同 LoveIt，因此此文档仍然可参考。 ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:0:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#"},{"categories":null,"content":" 准备工作","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:1:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#准备工作"},{"categories":null,"content":" 安装 VS Code","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:1:1","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#安装-vs-code"},{"categories":null,"content":" 安装 Git官方下载地址：https://git-scm.com/downloads 打开下载的.exe安装包，一路Next即可。 安装完成后，在命令行窗口执行git --version命令，若能正确输出版本信息，则表示安装成功，如下图正确演示： 若遇到提示说命令不存在或找不到命令的，可尝试重新打开命令行窗口，或检查并添加git主程序路径（比如我的D:\\Dev\\Git\\cmd）到系统环境变量中（添加方法参考后面Hugo安装过程）后，再打开命令行窗口执行上面的命令。 ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:1:2","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#安装-git"},{"categories":null,"content":" 安装 Hugo 下载 HugoHugo 包括基础版本和支持自定义样式scss的 extended版本。 为了提高可用性，应对未来可能的自定义需求，我决定安装 Hugo extended 版本。 从 Hugo Release下载适合版本的压缩包，我的是Windows_x64。解压缩到想要安装的目录。解压出来，只有简单的一个主程序。可见，相对于 Hexo 依赖于 Node.js 及一大堆 npm 包，Hugo 的确非常的简洁。 添加环境变量将 Hugo 的主程序路径添加到系统环境变量中，这样在命令行终端中才能调用主程序执行一系列命令，之后我们就能直接在VS Code的终端中执行命令。我的安装路径为： bash D:\\Dev\\hugo_0.86.0\\ 首先打开 资源管理器/我的电脑，然后在左侧导航栏，右键点击 此电脑，在弹出菜单中，打开 属性。 依次在弹出窗口中点击 高级系统设置。 在弹出窗口中点击环境变量。 双击 path 变量，点击 添加，将 Hugo 主程序路径填入，点击 确定以保存修改。 验证配置是否成功VS Code 中 Ctrl+Shift+` ，打开终端，输入 hugo version，若能如下图所示，无错返回版本号，则环境配置成功。 建立本地站点打开终端，进入想将站点源文件放置的路径，执行以下命令，其中站点名指定站点工程源文件夹的名字，按照自己的需求随便取即可，和实际的网站 url不是一个东西。执行命令后，会按指定的站点名创建站点文件夹，并在文件夹下自动初始化生成路径结构以及相关的站点文件。 ps1 // 其中，hugo.wlcheng.github.io 换成自己的站点文件夹名字即可 hugo new site hugo.wlcheng.github.io cd hugo.wlcheng.github.io 输出结果如下截图： 生成的站点目录结构： ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:1:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#安装-hugo"},{"categories":null,"content":" 安装 Hugo 下载 HugoHugo 包括基础版本和支持自定义样式scss的 extended版本。 为了提高可用性，应对未来可能的自定义需求，我决定安装 Hugo extended 版本。 从 Hugo Release下载适合版本的压缩包，我的是Windows_x64。解压缩到想要安装的目录。解压出来，只有简单的一个主程序。可见，相对于 Hexo 依赖于 Node.js 及一大堆 npm 包，Hugo 的确非常的简洁。 添加环境变量将 Hugo 的主程序路径添加到系统环境变量中，这样在命令行终端中才能调用主程序执行一系列命令，之后我们就能直接在VS Code的终端中执行命令。我的安装路径为： bash D:\\Dev\\hugo_0.86.0\\ 首先打开 资源管理器/我的电脑，然后在左侧导航栏，右键点击 此电脑，在弹出菜单中，打开 属性。 依次在弹出窗口中点击 高级系统设置。 在弹出窗口中点击环境变量。 双击 path 变量，点击 添加，将 Hugo 主程序路径填入，点击 确定以保存修改。 验证配置是否成功VS Code 中 Ctrl+Shift+` ，打开终端，输入 hugo version，若能如下图所示，无错返回版本号，则环境配置成功。 建立本地站点打开终端，进入想将站点源文件放置的路径，执行以下命令，其中站点名指定站点工程源文件夹的名字，按照自己的需求随便取即可，和实际的网站 url不是一个东西。执行命令后，会按指定的站点名创建站点文件夹，并在文件夹下自动初始化生成路径结构以及相关的站点文件。 ps1 // 其中，hugo.wlcheng.github.io 换成自己的站点文件夹名字即可 hugo new site hugo.wlcheng.github.io cd hugo.wlcheng.github.io 输出结果如下截图： 生成的站点目录结构： ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:1:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#下载-hugo"},{"categories":null,"content":" 安装 Hugo 下载 HugoHugo 包括基础版本和支持自定义样式scss的 extended版本。 为了提高可用性，应对未来可能的自定义需求，我决定安装 Hugo extended 版本。 从 Hugo Release下载适合版本的压缩包，我的是Windows_x64。解压缩到想要安装的目录。解压出来，只有简单的一个主程序。可见，相对于 Hexo 依赖于 Node.js 及一大堆 npm 包，Hugo 的确非常的简洁。 添加环境变量将 Hugo 的主程序路径添加到系统环境变量中，这样在命令行终端中才能调用主程序执行一系列命令，之后我们就能直接在VS Code的终端中执行命令。我的安装路径为： bash D:\\Dev\\hugo_0.86.0\\ 首先打开 资源管理器/我的电脑，然后在左侧导航栏，右键点击 此电脑，在弹出菜单中，打开 属性。 依次在弹出窗口中点击 高级系统设置。 在弹出窗口中点击环境变量。 双击 path 变量，点击 添加，将 Hugo 主程序路径填入，点击 确定以保存修改。 验证配置是否成功VS Code 中 Ctrl+Shift+` ，打开终端，输入 hugo version，若能如下图所示，无错返回版本号，则环境配置成功。 建立本地站点打开终端，进入想将站点源文件放置的路径，执行以下命令，其中站点名指定站点工程源文件夹的名字，按照自己的需求随便取即可，和实际的网站 url不是一个东西。执行命令后，会按指定的站点名创建站点文件夹，并在文件夹下自动初始化生成路径结构以及相关的站点文件。 ps1 // 其中，hugo.wlcheng.github.io 换成自己的站点文件夹名字即可 hugo new site hugo.wlcheng.github.io cd hugo.wlcheng.github.io 输出结果如下截图： 生成的站点目录结构： ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:1:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#添加环境变量"},{"categories":null,"content":" 安装 Hugo 下载 HugoHugo 包括基础版本和支持自定义样式scss的 extended版本。 为了提高可用性，应对未来可能的自定义需求，我决定安装 Hugo extended 版本。 从 Hugo Release下载适合版本的压缩包，我的是Windows_x64。解压缩到想要安装的目录。解压出来，只有简单的一个主程序。可见，相对于 Hexo 依赖于 Node.js 及一大堆 npm 包，Hugo 的确非常的简洁。 添加环境变量将 Hugo 的主程序路径添加到系统环境变量中，这样在命令行终端中才能调用主程序执行一系列命令，之后我们就能直接在VS Code的终端中执行命令。我的安装路径为： bash D:\\Dev\\hugo_0.86.0\\ 首先打开 资源管理器/我的电脑，然后在左侧导航栏，右键点击 此电脑，在弹出菜单中，打开 属性。 依次在弹出窗口中点击 高级系统设置。 在弹出窗口中点击环境变量。 双击 path 变量，点击 添加，将 Hugo 主程序路径填入，点击 确定以保存修改。 验证配置是否成功VS Code 中 Ctrl+Shift+` ，打开终端，输入 hugo version，若能如下图所示，无错返回版本号，则环境配置成功。 建立本地站点打开终端，进入想将站点源文件放置的路径，执行以下命令，其中站点名指定站点工程源文件夹的名字，按照自己的需求随便取即可，和实际的网站 url不是一个东西。执行命令后，会按指定的站点名创建站点文件夹，并在文件夹下自动初始化生成路径结构以及相关的站点文件。 ps1 // 其中，hugo.wlcheng.github.io 换成自己的站点文件夹名字即可 hugo new site hugo.wlcheng.github.io cd hugo.wlcheng.github.io 输出结果如下截图： 生成的站点目录结构： ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:1:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#验证配置是否成功"},{"categories":null,"content":" 安装 Hugo 下载 HugoHugo 包括基础版本和支持自定义样式scss的 extended版本。 为了提高可用性，应对未来可能的自定义需求，我决定安装 Hugo extended 版本。 从 Hugo Release下载适合版本的压缩包，我的是Windows_x64。解压缩到想要安装的目录。解压出来，只有简单的一个主程序。可见，相对于 Hexo 依赖于 Node.js 及一大堆 npm 包，Hugo 的确非常的简洁。 添加环境变量将 Hugo 的主程序路径添加到系统环境变量中，这样在命令行终端中才能调用主程序执行一系列命令，之后我们就能直接在VS Code的终端中执行命令。我的安装路径为： bash D:\\Dev\\hugo_0.86.0\\ 首先打开 资源管理器/我的电脑，然后在左侧导航栏，右键点击 此电脑，在弹出菜单中，打开 属性。 依次在弹出窗口中点击 高级系统设置。 在弹出窗口中点击环境变量。 双击 path 变量，点击 添加，将 Hugo 主程序路径填入，点击 确定以保存修改。 验证配置是否成功VS Code 中 Ctrl+Shift+` ，打开终端，输入 hugo version，若能如下图所示，无错返回版本号，则环境配置成功。 建立本地站点打开终端，进入想将站点源文件放置的路径，执行以下命令，其中站点名指定站点工程源文件夹的名字，按照自己的需求随便取即可，和实际的网站 url不是一个东西。执行命令后，会按指定的站点名创建站点文件夹，并在文件夹下自动初始化生成路径结构以及相关的站点文件。 ps1 // 其中，hugo.wlcheng.github.io 换成自己的站点文件夹名字即可 hugo new site hugo.wlcheng.github.io cd hugo.wlcheng.github.io 输出结果如下截图： 生成的站点目录结构： ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:1:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#建立本地站点"},{"categories":null,"content":" LoveIt 主题在Hugo 的主题商城扫了一圈，最后选了 LoveIt这一款主题。从 LoveIt的官方网站上逛了一圈，观感很棒。真可谓官方介绍的“一款简洁、优雅且高效的Hugo博客主题”。 ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:2:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#loveit-主题"},{"categories":null,"content":" 安装主题LoveIt 主题的仓库地址是 https://github.com/dillonzq/LoveIt 。 补充：DoIt 主体仓库地址是 https://github.com/HEIGE-PCloud/DoIt 。 可以直接下载最新版主题压缩包，将其解压到站点目录下的 themes文件夹中。 也可以直接用 git 克隆到该目录下，在站点目录下执行以下命令： bash git clone https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:2:1","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#安装主题"},{"categories":null,"content":" 配置主题替换站点配置文件 /config.toml 内容为： toml baseURL = \"http://wlchengg.github.io/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"Wlcheng's Life\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:2:2","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#配置主题"},{"categories":null,"content":" 创建文章 bash hugo new posts/first-blog.md // 这会在content文件夹下创建posts文件夹， // 并在里面创建first-blog.md文件。 ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:2:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#创建文章"},{"categories":null,"content":" 部署到 Github PagesGithub Pages 即为 ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:3:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#部署到-github-pages"},{"categories":null,"content":" 创建空 Github 仓库将仓库名取为：username.github.io Github 的人性化 Github 提供两种 Pages： (1) 用户主页：以`username.github.io`作为仓库名，直接通过`username.github.io`访问； (2) 仓库主页：任意合法名称作为仓库名，通过'github.com 填上仓库名；选定 public 仓库；不需勾选初始化选项，后续将从我们的本地仓库直接 push 到线上仓库中。 ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:3:1","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#创建空-github-仓库"},{"categories":null,"content":" 关联本地站点到仓库进入本地站点路径； 初始化 git 环境： bash git init 安装主题： 自行到Hugo选择主题后，将主题仓库克隆到themes路径下。此处我用DoIt主题为例： bash git submodule add github.com themes/DoIt 添加 .gitignore 文件到站点根目录下，写入以下内容： ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:3:2","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#关联本地站点到仓库"},{"categories":null,"content":" 进阶 —— 通过 Github Actions 自动编译部署站点","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:3:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#进阶--通过-github-actions-自动编译部署站点"},{"categories":null,"content":" 参考 主题文档 - 基本概念 —— Dillon —— LoveIt 在 Windows 上搭建 Hugo 博客之 Github 部署填坑记 Hugo+Github Pages 搭建个人博客手记萌新向 如何挑选博客框架、在线博客平台 Git 基础原理和用法 ","date":"2021-07-27","objectID":"/posts/blog_by_hugo_loveit/:4:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/posts/blog_by_hugo_loveit/#参考"},{"categories":null,"content":"本文记录对 Hexo 博客所做的初次配置。 ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:0","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html \u003cdiv class=\"sidebar-inner\u003e \u003c!--网易云插件--\u003e \u003ciframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2\u0026id=25780279\u0026auto=1\u0026height=66\"\u003e\u003c/iframe\u003e \u003c/div\u003e 歌单外链 如果出现以上的版权限制，按照链接进行以下操作，： 组合成外链地址：https://music.163.com/#/outchain/0/37673790/ 但很遗憾，弹出生成失败的提示，应该是版权限制。 挖个坑，有时间来补充解决方案。 Pjax 实现背景音乐全局播放页面跳转刷新时，音乐不间断播放。 打开主题目录下 themes/next/layout/_layout.njk 文件， 在 \u003c/head\u003e 标签前添加以下代码，并保存。 html \u003chead\u003e \u003c!--pjax：防止跳转页面音乐暂停--\u003e \u003cscript src=\"https://fastly.jsdelivr.net/npm/pjax@0.2.8/pjax.js\"\u003e\u003c/script\u003e \u003c/head\u003e 主题配置文件_config.yml里，打开 pjax 开关。 yml # Easily enable fast Ajax navigation on your website. # For more information: https://github.com/next-theme/pjax pjax: true 参考： Hexo NexT 博客增加网易云音乐 Hexo + Next 主题实现全局播放背景音乐 主页文章阴影效果打开 \\themes\\next\\source\\css\\_commom\\components\\posts\\index.styl，修改 .use-motion 下的 .post-block 代码，如下： styl // 主页添加阴影效果 .use-motion { if (hexo-config('motion.transition.post_block')) { .post-block { visibility: hidden; margin-top: 60px; margin-bottom: 60px; padding: 25px; background: rgba(255,255,255,0.9) none repeat scroll !important; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); } .pagination, .comments { visibility: hidden; } } 效果如下： 修改文章底部标签图标样式打开 themes/next/_config.yml，搜索并将 tag_icon 项打开。原样式为\"#\"。 yml tag_icon: true 文章置顶（作废）打开 themes\\next\\layout\\_macro\\post.njk，在 post-meta-container中添加以下代码： text {% if post.top %} \u003ci class=\"fa fa-thumb-tack\"\u003e\u003c/i\u003e \u003cfont color=7D26CD\u003e置顶\u003c/font\u003e \u003cspan class=\"post-meta-divider\"\u003e|\u003c/span\u003e {% endif %} 文章手动排序打开 node_modules/hexo-generator-index/lib/generator.js，修改代码为： javascript \"use strict\"; const pagination = require(\"hexo-pagination\"); const { sort } = require(\"timsort\"); module.exports = function (locals) { var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function (a, b) { if (a.top \u0026\u0026 b.top) { // 两篇文章top都有定义 if (a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 } else if (a.top \u0026\u0026 !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; } else if (!a.top \u0026\u0026 b.top) { return 1; } else return b.date - a.date; // 都没定义按照文章日期降序排 }); var paginationDir = config.pagination_dir || \"page\"; var path = config.index_generator.path || \"\"; return pagination(\"\", posts, { perPage: config.index_generator.per_page, layout: [\"index\", \"archive\"], format: paginationDir + \"/%d/\", data: { __index: true, }, }); }; 在博文源文件头部加上 top 标识，数字越大，优先级越高： 参考： hexo 博文置顶方法——大专栏 折叠过长代码块（按参考未成功） 添加 code-unfold.js 文件新建以下代码折叠脚本文件，放在 themes/next/source/js/下。 javascript var CODE_MAX_HEIGHT = 200; var containers = []; // 展开 $('body').on('click', '.js_unfold_code_btn', function () { $(this).closest('.js_highlight_container').addClass('on'); }); // 收起 $('body').on('click', '.js_retract_code_btn', function () { var $container = $(this).closest('.js_highlight_container').removeClass('on'); var winTop = $(window).scrollTop(); var offsetTop = $container.offset().top; $(this).css('top', 0); if (winTop \u003e offsetTop) { // 设置滚动条位置 $('body, html').animate({ scrollTop: $container.offset().top - CODE_MAX_HEIGHT }, 600); } }); // 滚动事件，触发动画效果 $(window).on('scroll', function () { var scrollTop = $(window).scrollTop(); var temp = []; for (let i = 0; i \u003c containers.length; i++) { var item = containers[i]; var { $container, height, $hide, hasHorizontalScrollbar } = item; if ($container.closest('body').length === 0) { // 如果 $container 元素已经不在页面上, 则删除该元素 // 防止pjax页面跳转之后，元素未删除 continue; } temp.push(item); if (!$container.hasClass('on')) { continue; } var offsetTop = $container.offset().top; var hideBtnHeight = $hide.outerHeight(); // 减去按钮高度，减去底部滚动条高度 var maxTop = parseInt(height - (hasHorizontalScrollbar ? 17 : 0) - hideBtnHeight); let top = parseInt( Math.min( Math.max(scrollTop - offsetTop, 0), // 如果小于 0 ，则取 0 maxTop,// 如果大于 height ，则取 height ) ); // 根据 sin 曲线设置\"收起代码\"位置 var ha","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#主题设置"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#侧边菜单栏"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#侧边栏头像"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#侧边栏插入网易云音乐外链"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#单曲外链"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#歌单外链"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#pjax-实现背景音乐全局播放"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#主页文章阴影效果"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#修改文章底部标签图标样式"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#文章置顶作废"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#文章手动排序"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#折叠过长代码块按参考未成功"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#添加-code-unfoldjs-文件"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#添加-jquery"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#添加样式"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#腾讯公益404页面"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#页脚展示建站时间"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#字数与阅读时长统计"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#博客配置"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#picgo-插入图片格式"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#常见问题"},{"categories":null,"content":" 主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： html ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#主题在本地能渲染而部署到github后丢失主题"},{"categories":null,"content":" 参考Hexo Next 主题详细配置之一——Clay ","date":"2021-07-24","objectID":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:2","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/posts/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/#参考"},{"categories":["技术"],"content":"安装 Mathtype 过程记录，并解决集成到 Word 菜单栏的问题。 ","date":"2019-11-28","objectID":"/posts/mathtype-setup-for-word/:0:0","series":null,"tags":["MathType","Word"],"title":"MathType 安装及 Word 菜单项集成","uri":"/posts/mathtype-setup-for-word/#"},{"categories":["技术"],"content":" MathType 安装问题","date":"2019-11-28","objectID":"/posts/mathtype-setup-for-word/:1:0","series":null,"tags":["MathType","Word"],"title":"MathType 安装及 Word 菜单项集成","uri":"/posts/mathtype-setup-for-word/#mathtype-安装问题"},{"categories":["技术"],"content":" 安装并破解从六维空间上下载的MathType 7.2版本，按照说明 首先安装 MathType-win-zh7.2.exe，安装过程一切顺利，因为安装需要向Office 添加加载项，所以需要将Office 一切程序都关闭； 以防意外，打开之前MathType 和Office 之前，先进行破解，提供的破解软件有两个，作用不同： [neubt]MathType替换原文件.exe：替换MathType 根目录的主启动程序 MathType.exe，作用是去掉打开程序时提示测试版到期的弹窗通知。 [neubt]MathType7.xCrack.zip：解压后得到mathtypelib.exe，替换MathType 根目录下System 子文件夹里的同名文件。 完成以上两个文件的替换后，启动 MathType，会弹出一个对话框，但按钮上的字都变成了问号，不管他，直接叉掉对话框，然后可以发现功能完善，应该是已经成功破解。 打开Word，菜单栏上应该会多出一个 MathType的菜单项，说明安装成功，如果没有菜单项，请看下文解决方案。 ","date":"2019-11-28","objectID":"/posts/mathtype-setup-for-word/:1:1","series":null,"tags":["MathType","Word"],"title":"MathType 安装及 Word 菜单项集成","uri":"/posts/mathtype-setup-for-word/#安装并破解"},{"categories":["技术"],"content":" Word 没有MathType 菜单项 问题： 首先来说，MathType 正确加载的话，Word 的菜单栏上会有 MathType，如下 而现在问题是，打开Word，菜单栏没有 MathType 项， 原因： [1] 中给出的原因可以描述为 “当 Microsoft Office 自动更新程序运行并安装更新时，有时会禁用加载项，这样就会删除任何工具栏/功能区附加项。” Word 上的 MathType加载项要能正确运行并使用，须满足： MathType 正确安装； Word 正确加载 MathType 提供的加载项文件。 可见在MathType 本身安装无误情况下(指MathType 软件本身能正常使用)，Word 没有MathType菜单项的原因大概率就是因为 Word 没能正确的加载 MathType 加载项。 解决方案： 此时虽然可以迂回的通过以下方式插入公式： 通过插入对象的方式，插入-\u003e对象-\u003e选择MathType对象； 直接从MathType 软件里编辑好的公式复制进Word。 但是，如果要实现插入带编号公式等较高级的功能的话，还是用集成的 MathType工具栏方便的多，从前面的图就可见一斑。 准备工作： 首先查看 Office Word 版本以及 MathType版本，兼容关系为 查看我的版本分别为 Word：文件-\u003e账户-\u003e关于-\u003e Office 365 32位，因此需要MathType 版本大于 6.9b MathType：关于-\u003e7.2.0.420 \u003e 6.9b 确定Word 和 MathType安装路径： Office 安装路径：D:\\Program Files (x86)\\Microsoft Office\\ MathType 路径：D:\\Math\\MathType\\ 安装路径可能不同，根据自己情况而定。 步骤： Word菜单栏-\u003e文件-\u003e选项-\u003e加载项-\u003e底部管理下拉框选择 Word加载项 并点击转到，弹出类似下面的对话框， 没问题的情况下，这里的第一项应该是被勾选上的，如下说明。 如果，没有以上对话框中的项，则选择从以下两个目录之一中 添加 正确版本的 .dotm文件，然后勾选并确定。 D:\\Math\\MathType\\Office Support\\32 （32位 Office） D:\\Math\\MathType\\Office Support\\64 （64位 Office） 对于我的版本，选择 MathType Commands 2016.dotm 这一个 勾选 MathType Commands 2016.dotm 项并 确定后，Word会加载出MathType 的菜单项，如图1所示。 然而，然而，然而事情并非如此简单， 当关闭Word，并重新打开后，忙半天加上的MathType 菜单项又没啦。 这么看应该是设置的问题，在Word 启动时，并没有自动加载 MathType 加载项。那么要自动加载，是不是就得把这个MathType Commands 2016.dotm 文件放到Word 的默认加载目录下面？ 但是再次按照第3步，打开Word 加载项对话框，发现有这一项，但却没有勾选。那么怎么设置为默认勾选呢？ 幸而 [2] 对此也给出了解决方案：由于不同版本的系统、Office软件或者不同用户自定义的原因，Word 的加载项路径可能不一样。 根据说明，需要将前面的两个文件拷贝到 Word的加载项（启动项）目录下面，目录存在以上图中 3种可能，图中 1和 2根据 Office 是32位/64位只取其一。 以做对比，将可能的三个目录位置都打开，如下1、2、3，依次将这两个文件放到这三个目录下， 经过尝试，，放在 2对应路径下时，Word成功加载了MathType菜单项。 比较前后两张图，此处有一个问题，下图中除了拷贝进去的两个模板文件外，还有一个MathPage.wll，这个文件实际上是一种DLL文件，也不可少，也是来自于MathType的安装目录，事实上，当MathType安装成功后，会自动将其拷贝到这个 2 对应的目录，一般无需手动添加，如果发现没有，可以从MathType安装根目录下的MathType文件夹里面找到，如下图，根据32位或64位选择。 总结 最后，来回顾一下过程，根据 常用设置 中的，《查看 Word 相关各类文件的默认位置》就能够查看Word 默认的启动项位置，正好是上面给出的第二种目录。 因此，解决以上问题的正确思路应该是，将模板加载项文件拷贝到 Word的默认的启动项位置目录下。 参考： [1] MathType Toolbar/Tab has disappeared from Microsoft Word [2] MathType Tab has disappeared from Microsoft Word 2016 and later for Windows ","date":"2019-11-28","objectID":"/posts/mathtype-setup-for-word/:1:2","series":null,"tags":["MathType","Word"],"title":"MathType 安装及 Word 菜单项集成","uri":"/posts/mathtype-setup-for-word/#word没有mathtype菜单项"},{"categories":null,"content":"夕阳西下 清晨的东方已默默站在面前了 —— 泰戈尔《飞鸟集》 ","date":"2019-11-28","objectID":"/posts/poem-of-beginning/:0:0","series":null,"tags":["诗句"],"title":"起源","uri":"/posts/poem-of-beginning/#"},{"categories":null,"content":"工欲善其事，必先利其器。 ","date":"0001-01-01","objectID":"/tools/:0:0","series":null,"tags":null,"title":"工具箱","uri":"/tools/#"},{"categories":null,"content":" 网站 Hugo in Action Hugo 中文帮助文档 ","date":"0001-01-01","objectID":"/tools/:0:0","series":null,"tags":null,"title":"工具箱","uri":"/tools/#网站"},{"categories":null,"content":" 软件","date":"0001-01-01","objectID":"/tools/:0:0","series":null,"tags":null,"title":"工具箱","uri":"/tools/#软件"},{"categories":null,"content":" 浏览器扩展 SingleFile 暴力猴 沙拉查词 待我慢慢扩充...... ","date":"0001-01-01","objectID":"/tools/:0:0","series":null,"tags":null,"title":"工具箱","uri":"/tools/#浏览器扩展"},{"categories":null,"content":"假如全世界的少女都肯携起手来， 她们可以在大海周围跳一个回旋舞。 假如全世界的男孩都肯做水手， 他们可以用他们的船在水上造成一座美丽的桥。 那时人们便可以绕着全世界跳一个回旋舞， 假如全世界的男女孩都肯携起手来。 CaesarCaser 一壶浊酒喜相逢，来一杯吗 Ying Li Tomorrow is another day! KalosAner Blog 欲速则不达 Xiangyi Chen Hi, there ~ 张琪's Blog 自信 学习 行动 自省 咸蛋超人 Now or Never 折影轻梦 为热爱战斗着，努力学着变得勇敢 饼藏的情敌 在追求梦想的路上，坚持不懈 夜轻Blog 一个人 PuddingKC's Blog 愿你所热爱的依旧不减当年。 V2 方圆 很全很赞的工具资源导航 PCloud This is PCloud~💤 友链互换，请按以下格式留言 😎 name= “Wlcheng’ Life” url= “https://wlcheng.cc” avatar= “https://wlcheng.cc/images/avatar.png\" bio= “来日方长，何惧车遥马慢” ","date":"0001-01-01","objectID":"/friends/:0:0","series":null,"tags":null,"title":"篝火","uri":"/friends/#"}]