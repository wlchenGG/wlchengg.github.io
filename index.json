[{"categories":null,"content":"搭建Github图床 Github仓库支持1G存储容量。 ","date":"2022-05-06","objectID":"/github_picture_bed/:1:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床搭建及使用","uri":"/github_picture_bed/"},{"categories":null,"content":"创建Github仓库 在Github主页点击New Repository开始创建仓库。 基本设置：仓库名，描述，仓库类型public，勾选Add a README file，其他保持默认即可。然后点击Create repo。 然后网页会自动跳转到我们刚刚创建的仓库主页。我们要在这个仓库下面创建一个文件夹用于以后存放图片（当然不创建文件夹，直接将图片上传到仓库个目录也可以）。点击Add file下的Create new file。 跳转到以下页面，我们按照图中方式依次输入foldername，/，filename，名字自己任取就行。因为这里不支持只创建文件夹，因此需要给出一个文件名。点击Commit new file提交更改。 ","date":"2022-05-06","objectID":"/github_picture_bed/:1:1","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床搭建及使用","uri":"/github_picture_bed/"},{"categories":null,"content":"创建repo token token 用于给后面我们用 PicGo 访问仓库并上传图片赋予权限。 首先在自己的头像下点击Settings。 在左侧边栏往下找到并打开Developer settings 如下图，点击左侧边栏Personal access token，然后点击Generate new token 此步因为要赋予权限，因此会弹出窗口验证账号密码，填入后Confirm password即可。 然后就会到以下的 token 设置界面，按照图中所述进行创建即可。 成功生成token后，马上复制下来，之后配置PicGo会用到。 通过以上过程，我们的图床算是搭建完毕了，接下来就要利用 PicGo 实现从本地上传图片，并获取图片链接。 ","date":"2022-05-06","objectID":"/github_picture_bed/:1:2","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床搭建及使用","uri":"/github_picture_bed/"},{"categories":null,"content":"配置PicGo 官方网站：PicGo。此处下载稳定版本的 PicGo。下载后，按下图安装即可 启动后，直接左键单击托盘图标，打开PicGo设置界面 如下图，左侧展开图床设置，点击Github图床，右侧填入相关设置信息。 以上填写各项的说明： 对于仓库名，分支名，存储路径这几项，我们已经通过前面的步骤创建了，打开如下的仓库主页面，就可以知道。 而对于token，我们前面创建并已经复制了的，粘贴进来就可以。 对于自定义域名， 我们上传图片的Github官方链接是： https://raw.githubusercontent.com/用户名/仓库名@分支名，可以直接通过此链接进行访问。但因为网速问题，我们往往通过 CDN 内容服务器进行访问，相当于是在全球各地建立内容缓存服务器，在访问内容时，能从就近的服务器上快速获取到内容。 使用 jsDilivr 作为 CDN 为 Github 提供加速。只需要按照以下格式填入上面的自定义域名框中就行： ❌https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名 但是，由于cdn.jsdelivr.net遭到 DNS 污染 (Luminous’ Home)，暂将自定义域名更换为： ⭕https://fastly.jsdelivr.net/gh/用户名/仓库名@分支名 或者其他备用： CloudFlare：test1.jsdelivr.net CloudFlare：testingcf.jsdelivr.net Fastly：fastly.jsdelivr.net GCORE：gcore.jsdelivr.net 那么对于我的设置，我这里应该填入的是： https://fastly.jsdelivr.net/gh/wlchenGG/myPictureBed@main 填好以上信息后，点击确定即可设置成功。 我们可以测试一下，在上传区，改为 Github图床，然后上传一张图片，稍作等待，提示上传成功后，将自动复制创建好的链接（这个链接默认为markdown的，后续我们会自定义一下）。 以下是我测试生成的默认markdown格式链接，你可以将其放入markdown文件中测试一下，是一张可正常访问的图片，说明能够正常上传。 ![](https://fastly.jsdelivr.net/gh/wlchenGG/myPictureBed@main/images/wallpaper19.jpg) ","date":"2022-05-06","objectID":"/github_picture_bed/:2:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床搭建及使用","uri":"/github_picture_bed/"},{"categories":null,"content":"配置Typora 打开Typora，按照下图设置。其中第7步选择自己安装PicGo的位置。 此处插入标题 测试一下，在Typora编辑界面，粘贴或者拖入图片时，将自动以Markdown格式插入图片，从链接可以看出图像已经上传。 我们手头已经有很多文档，图片都是本地保存的怎么办呢。只需要完成以上设置后，通过以下选项，就可以将当前文档中的所有本地图片上传到图床中，并会自动将文档中的图片链接全部替换为图床链接。 ","date":"2022-05-06","objectID":"/github_picture_bed/:3:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床搭建及使用","uri":"/github_picture_bed/"},{"categories":null,"content":"自定义链接格式控制图片样式（可选） 打开PicGo，按照以下步骤设置 其中，自定义链接的格式（这是一段HTML代码，我们用来美化图片的显示样式。 我们给出如下几种，自行选择所需，将其粘贴到上图4的框中即可。 美化方式 效果图 链接格式 控制大小 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\"/\u003e\u003c/div\u003e 圆角处理 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"border-radius:10px;\"/\u003e\u003c/div\u003e 图片阴影 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\"/\u003e\u003c/div\u003e 阴影+圆角 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;\"/\u003e\u003c/div\u003e 阴影+标题 此处插入标题 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\"/\u003e\u003cbr\u003e\u003cdiv style=\"color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #777; font-size: 90%; padding: 1px;\"\u003e此处插入标题\u003c/div\u003e\u003c/div\u003e 圆角+标题 此处插入标题 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"border-radius:10px;\"/\u003e\u003cbr\u003e\u003cdiv style=\"color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #777; font-size: 90%; padding: 1px;\"\u003e此处插入标题\u003c/div\u003e\u003c/div\u003e 阴影+圆角+标题 此处插入标题 \u003cdiv align=\"center\" \u003e\u003cimg src=\"$url\" alt=\"$fileName\" width=\"75%\" style=\"box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;\"/\u003e\u003cbr\u003e\u003cdiv style=\"color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #777; font-size: 90%; padding: 1px;\"\u003e此处插入标题\u003c/div\u003e\u003c/div\u003e 其中， width=\"75%\"：控制图片大小，百分比是占整个文档宽度的比例（方便适配不同网页大小），也可以直接写成width=\"300\"等整数用来控制图片的绝对大小。 border-radius:10px;：用来控制圆角大小。 此处插入标题：为图片设置标题。 配置完以上自定义链接格式后，如下图，在PicGo上传界面，选定custom，之后就可以退出PicGo了。 在Typora中，同样是拖入或者粘贴图片时，就会获取以上设置的链接到剪切板中，只需要粘贴到Typora中即可。 这里有一个问题是，Typora 粘贴图片时，始终会默认粘贴Markdown格式的图片链接，如前一小节所示。因此，我们要将Typora自动生成的删除，然后将剪切板中的自定义格式链接粘贴进去即可。如下图所示： ","date":"2022-05-06","objectID":"/github_picture_bed/:4:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床搭建及使用","uri":"/github_picture_bed/"},{"categories":null,"content":"配置VS Code TODO: 后补 参考： [1] 从零开始免费搭建自己的博客 (五)——Typora + PicGo + GitHub/Gitee 图床 ","date":"2022-05-06","objectID":"/github_picture_bed/:5:0","series":null,"tags":["Github","Markdown","图床","Typora"],"title":"Github 图床搭建及使用","uri":"/github_picture_bed/"},{"categories":null,"content":"R2021a安装流程 右键装载Matlab910R2021a_Win64.iso镜像文件： 打开安装程序setup.exe 在高级选项中选择我有文件安装密钥 点选是接收许可协议条款，点击下一步 输入安装密钥09806-07443-53955-64350-21751-41297，点击下一步。 p.s. 如果是standalone方式，个人使用，填写密钥：09806-07443-53955-64350-21751-41297 如果是Server方式，作为服务器或集群节点，填写密钥：40236-45817-26714-51426-39281 选择许可证文件： 选择要安装的工具包。 安装完毕，关闭即可。 ","date":"2022-04-03","objectID":"/install_matlab/:1:0","series":null,"tags":["matlab"],"title":"Matlab 2021a 安装与激活","uri":"/install_matlab/"},{"categories":null,"content":"R2021a激活流程 拷贝文件夹Matlab910Win中的libmwlmgrimpl.dll文件到R2021a安装位置下的路径\"\\bin\\win64\\matlab_startup_plugins\\lmgrimpl\"中; 拷贝文件夹Matlab910Win中的license.lic文件到R2021a安装位置下的路径“\\licenses”中。 安装完后，发现开始菜单的图标不能正确显示。 按照以下操作自行创建开始菜单图标即可。 ","date":"2022-04-03","objectID":"/install_matlab/:2:0","series":null,"tags":["matlab"],"title":"Matlab 2021a 安装与激活","uri":"/install_matlab/"},{"categories":null,"content":"R2018安装流程 勾选使用文件安装密钥，进入下一步： 勾选是，进入下一步： 输入密钥：09806-07443-53955-64350-21751-41297，进入下一步： 选择安装目录，进入下一步： 按需选择要安装的工具箱： 确认要安装的清单后，点击安装： 程序安装进程： 打开看看效果 ","date":"2022-04-03","objectID":"/install_matlab/:3:0","series":null,"tags":["matlab"],"title":"Matlab 2021a 安装与激活","uri":"/install_matlab/"},{"categories":null,"content":"R2018激活流程 TODO: ","date":"2022-04-03","objectID":"/install_matlab/:4:0","series":null,"tags":["matlab"],"title":"Matlab 2021a 安装与激活","uri":"/install_matlab/"},{"categories":null,"content":"时隔两年，NASA 的第二次 “Send Your Name to Mars” 浪漫主义火星旅行项目又开始招募游客啦。(～￣▽￣)～ 接下来我们就一起来看看，如何才能拿到开往火星的飞船船票（登机牌）呢？ 首先进入我们的售票大厅：免费领票处 从上看起来是导引前台（导航栏）了，分了5个区，从左到右依次是：名字、登机牌、地图、常客、学习。根据颜色来看，当前应该是处于第一区的名字部分。对于功能大家在心里应该也有个猜测和期待。 好，我们就来看看这几个区具体都是干什么的。 ","date":"2021-12-12","objectID":"/to_mars/:0:0","series":null,"tags":null,"title":"以我之名，去火星旅行","uri":"/to_mars/"},{"categories":null,"content":"订票 首先可以看见，在名字分区里，映入眼帘的是一个大大的个人信息登记台，看起来需要填写姓名、国家、邮编以及邮箱这几项个人信息。然后往下是针对收集个人信息的隐私保护说明和一个是否需要通过邮箱接收来自NASA的新闻动态通知。再往下，一个显眼的SEND（发送）可谓是再明白不过地告诉我们，点了这个按钮，我们就能开始我们的火星浪漫之旅（在2026年以我们的名字去旅行 ^o^y）。 既然走到这里，我们不妨就做好登记，预定上这趟旅行吧！填上我们的信息： 做完登记，点击SEND提交我们的预定，只见眨眼功夫，我的登机牌就已生成（可以参考下各条信息的位置）： 左联条码信息配着一幅“火星日出图”，水印着“FUTURE MARS MISSION”的计划标识，仿佛昭示着我们此行的希望和对未来的颂扬。 右联中间大写刻着我们所登记的名字，将承载着我们的浪漫与期盼去往这颗红色的星球。名字下方注明了我们此次旅行的出发站点（发射台）和目的地耶泽洛陨石坑。 技巧 P.S. 为了接受来自世界各地的人民，NASA航空公司充分考虑到人名的多样性，对人名并未做限制，这给了一些思维清奇者自由发挥的空间😀。比如我在Last Name处填上姓名落款，First Name处填上一条寄语。妥妥的一封明信片，而且是送往火星的明信片😁。 ","date":"2021-12-12","objectID":"/to_mars/:1:0","series":null,"tags":null,"title":"以我之名，去火星旅行","uri":"/to_mars/"},{"categories":null,"content":"登机牌 即已经预定好登机牌，接下来我们就到登机牌区看看，是不是能够查到我们的登机牌了呢。 填好预定时的信息，点击下面的FIND，就能查到我们的登机牌信息了，可以再次下载、打印或者嵌入网页。 ","date":"2021-12-12","objectID":"/to_mars/:2:0","series":null,"tags":null,"title":"以我之名，去火星旅行","uri":"/to_mars/"},{"categories":null,"content":"地图 总算来到地图区了，让我们来看看： 一眼就盯到我们泱泱种花家深沉的颜色，再看右侧的排名，果然咱高居榜首，竟然已经有400多万的先行者👍。在看排行榜底部，截止我的购票日期，这购票人数已达到2000多万。但相对于全球79亿人来说还只是极少数，这么说我们也已经走在了世界前3‰列了呢😄。 ","date":"2021-12-12","objectID":"/to_mars/:3:0","series":null,"tags":null,"title":"以我之名，去火星旅行","uri":"/to_mars/"},{"categories":null,"content":"常客 常客常客，应该是指的第一次的火星之旅吧。我来查一查是否还有曾经的我的名字： 嗯，很棒！2019年预定，2020年7月20日毅力号发射，2021年2月18日登陆耶泽洛陨石坑。 ","date":"2021-12-12","objectID":"/to_mars/:4:0","series":null,"tags":null,"title":"以我之名，去火星旅行","uri":"/to_mars/"},{"categories":null,"content":"我们的名字在哪里？ 进入学习区，发现我们的初心。 就在这小小的悬架上面，我们的名字静静地躺着，仰望着满天星河 随着毅力号的前进，我们将看尽日升日出垂落漠，宇宙山川枯银河 几个字节的数据，仿佛牵系着我的灵魂 当我在蓝色星球上彷徨时，会想起在孤寂的红色大地上 有你，在以坚定的意志，探索前进 我们的名字，承载着毅力，在前进！ ","date":"2021-12-12","objectID":"/to_mars/:5:0","series":null,"tags":null,"title":"以我之名，去火星旅行","uri":"/to_mars/"},{"categories":null,"content":"数学分析知识点。 ","date":"2021-10-15","objectID":"/mathematics_analysis/:0:0","series":null,"tags":["数学","数学分析"],"title":"数学分析","uri":"/mathematics_analysis/"},{"categories":null,"content":"极限 ","date":"2021-10-15","objectID":"/mathematics_analysis/:1:0","series":null,"tags":["数学","数学分析"],"title":"数学分析","uri":"/mathematics_analysis/"},{"categories":null,"content":"导数、微分 ","date":"2021-10-15","objectID":"/mathematics_analysis/:2:0","series":null,"tags":["数学","数学分析"],"title":"数学分析","uri":"/mathematics_analysis/"},{"categories":null,"content":"微分学基本定理及导数应用 ","date":"2021-10-15","objectID":"/mathematics_analysis/:3:0","series":null,"tags":["数学","数学分析"],"title":"数学分析","uri":"/mathematics_analysis/"},{"categories":null,"content":"中值定理 定理1（费马定理） 若（i）函数$f(x)$在$x_0$点的某一邻域$O(x_0,\\delta)$内有定义，并且在此邻域内恒有 $$f(x) \\leq f(x_0)，$$ 或者 $$f(x) \\geq f(x_0)；$$ （ii）函数$f(x)$在$x_0$点可导，则有 $$f^{\\prime}(x)=0$$ 几何意义： 如果曲线在一点处有极大（小）值，且在该点处有切线，则该切线必定是水平的。 定理2（拉格朗日中值定理，微分学的中值定理） 若函数$f(x)$满足 （i）在$[a,b]$连续； （ii）在$(a,b)$可导， 则在$(a,b)$内至少存在一点$\\xi$，使 $$f^{\\prime}(\\xi) = \\frac{f(b)-f(a)}{b-a}.$$ 当$f(a)=f(b)$时，定理也称为罗尔定理。 定理结论式可写为$f^{\\prime}(a+\\theta (b-a)) = \\frac{f(b)-f(a)}{b-a}$ 或者$f(b)-f(a) = f^{\\prime}(a+\\theta (b-a)) (b-a)$，其中，$0\u003c\\theta\u003c1$。 定理结论的式子称为中值公式或者拉格朗日公式。 定理的条件式充分条件。 推论1 若$f(x)$对$(a,b)$内每一点$x$都有$f^{\\prime}(x)=0$，则在区间$a,b$内$f(x)$为一常数。 推论2 若两函数$f(x)$和$g(x)$在$(a,b)$内成立 $$f^{\\prime}(x) = g^{\\prime}(x)，$$ 则在$(a,b)$内$f(x)=g(x)+c$（$c$为一常数）。 定义（利普希茨Lipschitz条件） 若$f(x)$在$[a,b]$上有定义，且存在常数$L$，使对$[a,b]$上任意两点$x^{\\prime}$，$x^{\\prime\\prime}$， $$|f(x^{\\prime}-f(x^{\\prime\\prime})| \\leq L|x^{\\prime}-x^{\\prime\\prime}|$$ 成立，则称$f(x)$在$[a,b]$上满足利普希茨（Lipschitz）条件。 推论3 若$f(x)$在$[a,b]$上存在有界导数，则$f(x)$在$[a,b]$上满足利普希茨条件。 定理3（柯西中值定理） 若$f(x)$与$g(x)$在闭区间$[a,b]$上连续，在开区间$(a,b)$内可导，并且$g^{\\prime}(x) \\neq 0$，则在$(a,b)$内至少存在一点$\\xi$，使 $$\\frac{f(b)-f(a)}{g(b)-g(a)} = \\frac{f^{\\prime}(\\xi)}{g^{\\prime}(\\xi)}.$$ ","date":"2021-10-15","objectID":"/mathematics_analysis/:3:1","series":null,"tags":["数学","数学分析"],"title":"数学分析","uri":"/mathematics_analysis/"},{"categories":null,"content":"泰勒公式 一阶导近似 当$x$与$x_0$充分接近时，$f(x)$可以通过一阶导数进行近似，即 $$f(x) \\approx f(x_0) + f^{\\prime}(x_0)(x-x_0).$$ 当$|x|$很小时，常用近似式： $\\sin(x) \\approx x$ $\\tan(x) \\approx x$ $\\sqrt[n]{1 \\pm x} \\approx 1\\pm \\frac{x}{n}$ $\\frac{1}{1+x} \\approx 1-x$ $e^x \\approx 1+x$ $\\ln (1+x) \\approx x$ 泰勒公式 定理 若$f(x)$在$x=0$点的某个邻域内有直到$n+1$阶连续导数，那么在此邻域内有 $$f(x)=f(0) + {f}’(0)x + \\frac{{f}’’(0)}{2!}x^2+\\dots + \\frac{{f}^{(n)}(0)}{n!}x^n + R_n(x),$$ $$R_n(x) = \\frac{{f}^{(n+1)}(\\xi)}{(n+1)!}x^{n+1}, (0\u003cx\u003c\\xi).$$ 以上就是函数$f(x)$在$x=0$点附近关于$x$的幂函数展开式，称为泰勒展开式，其中$R_n(x)$叫做拉格朗日余项（$R_n(x)$表示为$o(x^n)$时称为佩亚诺余项）。 ","date":"2021-10-15","objectID":"/mathematics_analysis/:3:2","series":null,"tags":["数学","数学分析"],"title":"数学分析","uri":"/mathematics_analysis/"},{"categories":null,"content":"函数的单调性、凸性与极值 函数的单调性 定理1（函数单调性与导数数正负的关系） 若$f(x)$在$[a,b]$连续，在$(a,b)$可导，则$f(x)$在$[a,b]$单调增加（或单调减少）的充要条件为在$(a,b)$内$f’(x) \\geq 0$ （或 $f’(x) \\leq 0$）。用符号表示为 $$ \\begin{aligned} f(x)在[a,b]上 \\nearrow \\Longleftrightarrow f’(x) \\geq 0, \\newline f(x)在[a,b]上 \\searrow \\Longleftrightarrow f’(x) \\leq 0. \\end{aligned} $$ 函数的极大值和极小值 定义（极值、极值点） 若对于某一点$x_0$，存在$x_0$的一个邻域$(x_0-\\delta, x_0+\\delta)(\\delta\u003e0)$，使对于此邻域中的任意点$x$，都有$f(x) \\leq f(x_0)$（或$f(x) \\geq f(x_0)$），则称$f(x)$在$x_0$有一极大（小）值$f(x_0)$，$x_0$为极大（小）值点。 极值是局部的极值。 定理2（极值必要条件） 若$x_0$是$f(x)$的极值点，那么$x_0$只可能是$f’(x)$的零点或者$f(x)$的不可导点。 定理3（极值判别法之一） 设$f(x)$在$(x_0-\\delta,x_0)$和$(x_0,x_0+\\delta)$（其中$\\delta\u003e0$）可导，那么 （i）. 若在$(x_0-\\delta,x_0)$内$f’(x)\u003c0$，而在$(x_0,x_0+\\delta)$内$f’(x)\u003e0$，则$x_0$为极小值点； （ii）. 若在$(x_0-\\delta,x_0)$内$f’(x)\u003e0$，而在$(x_0,x_0+\\delta)$内$f’(x)\u003c0$，则$x_0$为极大值点； （i）. 若在这两个区间内$f’(x)$不变号，则$x_0$不是极值点。 定理4（极值判别法之二） 设$f(x)$为一阶、二阶可导，且$f’(x_0)=0$，那么 （i）若$f’’(x_0)\u003c0$，则$f(x_0)$是极大值； （ii）若$f’’(x_0)\u003e0$，则$f(x_0)$是极小值。 ","date":"2021-10-15","objectID":"/mathematics_analysis/:3:3","series":null,"tags":["数学","数学分析"],"title":"数学分析","uri":"/mathematics_analysis/"},{"categories":null,"content":"思科网络仿真工具 Cisco Packet Tracer 学习系列之一：软件获取及安装。 ","date":"2021-10-12","objectID":"/cisco_packet_tracer_install/:0:0","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/cisco_packet_tracer_install/"},{"categories":null,"content":"注册账号 在Cisco Packet Tracer填写信息进行注册。 ","date":"2021-10-12","objectID":"/cisco_packet_tracer_install/:1:0","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/cisco_packet_tracer_install/"},{"categories":null,"content":"安装软件 ","date":"2021-10-12","objectID":"/cisco_packet_tracer_install/:2:0","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/cisco_packet_tracer_install/"},{"categories":null,"content":"下载安装 在 Cisco Networking Academy 网页登录账号后，下载 Cisco Packet Tracer 安装包： 打开下载的安装包，执行安装程序： ","date":"2021-10-12","objectID":"/cisco_packet_tracer_install/:2:1","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/cisco_packet_tracer_install/"},{"categories":null,"content":"启动登录 启动界面： 首次启动需要登录我们前面注册的 Cisco Networking Academy 账号。此处勾选上Keep me logged in选项，能够3个月免手动登录。 依次输入账号、密码，点击Log in按钮完成登录。 登录后，会自动打开软件主界面，如下： ","date":"2021-10-12","objectID":"/cisco_packet_tracer_install/:2:2","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/cisco_packet_tracer_install/"},{"categories":null,"content":"修改语言 下载语言包文件：在列表中找到Simplified Chinese.ptl点击下载。 将下载的语言包文件拷贝到 Cisco Packet Tracer的安装目录（根据自己的安装目录而定）下的language文件夹下： 打开 Cisco Packet Tracer 从菜单上依次点击 Options|Preferences； Translator 框中，选定Simplified Chinese； 点击 Change Language； 弹出框提示\"将在下次打开软件时生效。点OK。 关闭软件并重新打开查看是否修改成功。 搭好环境，下一篇正式开始学习使用。 ","date":"2021-10-12","objectID":"/cisco_packet_tracer_install/:2:3","series":null,"tags":["Cisco Packet Tracer"],"title":"Cisco Packet Tracer 学习 —— 安装","uri":"/cisco_packet_tracer_install/"},{"categories":null,"content":"应老师要求，把一个 30 多 MB 的 Word 文件压缩到 5MB 以内。一番探索，得出一套通过批量压缩 Word 中图片，以压缩 Word 的方案，记录于此。 精简版： 初步压缩：打开 Word，任选一张图片-\u003e点菜单栏上格式-\u003e左侧压缩图片-\u003e去掉勾选仅应用于此图片，勾选 96 ppi，点确定，保存文件； 提取图片：把 Word 文件后缀 docx 改成 zip，然后解压，解压文件夹下路径 word/media 里就是所有的图片了； 批量压缩：打开iloveimg 批量压缩图片，一次最多 30 张，下载并替换本地图片； 恢复 Word：把 word/media 下的图片替换成压缩后的图片，然后把整个文件夹压缩成 Zip，再把后缀 Zip 改回 docx 即可。 啰嗦版↓ ","date":"2021-08-20","objectID":"/word%E5%8E%8B%E7%BC%A9/:0:0","series":null,"tags":["Word"],"title":"Word压缩","uri":"/word%E5%8E%8B%E7%BC%A9/"},{"categories":null,"content":"需求评估 需求 现在 10 点，将这个 Word 文件压缩至 5M 以下，12点前返回。💔 原材料 所给文件是 docx 格式的 Word 文档，总大小 35MB；内含 73 张 png 格式截图，每张图占满一页；截图是期刊论文的首页截图，文字内容小且多，要尽量保证清晰。 上个全景图看看😲 分析与准备 时间紧，任务重，得高效解决。初步分析，涉及三点： **压缩：**由于文件内文字不多，首先忽略文字占用。那么总共 73 张图片，平均每张图片就得压缩至 68KB 以下。压缩图片来说，倒是有很多网站可以做到的，厉害点的还可以自由调整压缩比、分辨率等。 **批量：**压缩能解决了，但文件太多，不可能一张一张的去压缩再替换，既耗时又低效。这种重复工作一定要一定要批量处理。所幸 iloveimg 这个网站也是支持批量处理的，只不过一次处理最多 30 张图片，73张图片处理3次，可以接受。 Word图片导出：既然批量和压缩都能解决了，但图片还都在 Word 里面呢，总不能一张一张另存为吧。工具软件或者 Word 插件当然是有的，批量提取 Word 中的图片，但一个更朴素的方法当然是 解压 Word 文件 😄。因为 docx格式的 Word文档基于 OpenXML 标准，而这个标准是基于 Zip 压缩格式的。 ","date":"2021-08-20","objectID":"/word%E5%8E%8B%E7%BC%A9/:0:1","series":null,"tags":["Word"],"title":"Word压缩","uri":"/word%E5%8E%8B%E7%BC%A9/"},{"categories":null,"content":"压缩方案 初步压缩：先打开 word，随便选定一张图片，点菜单栏最后的格式栏，点击左侧压缩图片，去掉勾选 仅应用于此图片，勾选 电子邮件 (96 ppi) 的分辨率，点确定，记得保存修改。 提取图片：把 word 文件后缀 .docx 改成 zip，然后解压，解压后的文件夹里路径 word/media 下就是所有的图片了； 批量压缩：用这个网页工具 iloveimg 批量压缩图片，一次最多 30 张图片。一般直接能压缩到 100k 以下，但如果压缩后还是太大，可以再次上传压缩； 恢复 word：把 word/media 下的所有图片替换成压缩后的图片，然后把整个文件夹压缩成 zip 格式，再把后缀 zip 改回 docx 即可。 转 pdf：word 转成 pdf，最好是用 adobe（1. word 上右键菜单里转换为 Adobe PDF 文件，2. 或者打开 adobe 后 从文件创建 PDF 后，选 word 文件即可）。word 自带的导出和另存为大概率导出的 pdf 会比 word 要大。 ","date":"2021-08-20","objectID":"/word%E5%8E%8B%E7%BC%A9/:0:2","series":null,"tags":["Word"],"title":"Word压缩","uri":"/word%E5%8E%8B%E7%BC%A9/"},{"categories":null,"content":"总结 以上方案只能说是手动，更好的当然是能直接一个操作然后实现以上步骤的自动执行。不过目前能力不足，只能到此。 ","date":"2021-08-20","objectID":"/word%E5%8E%8B%E7%BC%A9/:0:3","series":null,"tags":["Word"],"title":"Word压缩","uri":"/word%E5%8E%8B%E7%BC%A9/"},{"categories":null,"content":"记录新版 PowerShell 美化过程。 ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:0","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"安装 Windows Terminal 可以在微软商店 (Microsoft Store) 搜索 Windows Terminal 安装。 商城搜索结果会有多种版本的Windows Terminal (以下将简称为Terminal)，不知选哪个的话，可直接点击此处链接 Windows Terminal - 微软商店，然后点击获取，弹出框中同意打开电脑的微软商城，跳转到软件主页后，直接安装即可。安装过程无需做任何选项与设置，就像在手机上的软件商城中搜索软件进行安装一样简单。 当然，如果想体验最新功能，可以去官方Github发布页获取最新预览版本：Windows Terminal - Github 安装完后的 Windows Terminal，可以在系统开始菜单找到并打开。先看一下美化前的样子。 美化之前的PowerShell 朴实无华，看着其实也还不错。 可以看到Terminal的多窗口是标签化管理的，大为方便软件内的切换。而菜单栏上右侧的 +号可以快速开启一个默认类型的窗口。﹀下拉菜单可以选择各类终端窗口。 然后看一下终端显示的内容。因为要美化的是PowerShell，我便打开了一个Windows PowerShell窗口，键入命令 $PSVersionTable后回车，可以看到当前PowerShell的版本号为5.1，仍然是老版本。之后我们要将其换成 开源跨平台的船新版本。请看下文~ ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"安装 PowerShell (更新) 从 Microsoft Store 安装 微软商城搜索 PowerShell Preview ，安装即可。官方渠道，可以自动更新，无需重复配置环境。 安装完成后，重新打开 Terminal。 从 Github 下载安装 采用此种方式的话，之后需要自己手动下载新版本安装包，并重新进行后续的美化配置。 船新版本在哪里？当然看准官方发布渠道，我选了最新预览版：PowerShell 可以观察到，曾经的PowerShell 全名为 Windows PowerShell，但是现在去掉了前面的Windows，只留PowerShell一词；另外发布页的 Assets中也确实提供了各种平台的版本。这无疑是名副其实的跨平台了。 言归正传，从上面官方发布页中，我选择了 7.2.0-preview-win-x64 版本的msi安装包。下载下来安装包后，直接双击运行，会经历以下步骤，最后还有一个对话框点击install即可。 这个船新版本的船新 Logo 灰常 Cyber 的说。 添加 PowerShell 到 Terminal 如果前面从Microsoft Store安装的PowerShell，一般会自动添加到 Temianl 中。如果没有的话，按照下面步骤自行添加即可。 打开 Terminal，点开菜单栏右侧下拉菜单，点击设置；或者直接按快捷键 Ctrl + ,，调出设置界面，按照下图步骤添加我们安装的 PowerShell 到Terminal中： 从 Microsoft Store 安装的 PowerShell，安装目录为：\"C:\\Users\\用户名\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.PowerShellPreview_8wekyb3d8bbwe\\pwsh.exe\"，将此目录添加到上图的命令行位置即可。 注意添加完后，点击保存。 Terminal无需重启即可即时更新配置，从下拉菜单中看到 PowerShell 7 已经添加成功。 下面开始我们的美化之路。 ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:2","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"美化 PowerShell 安装 on-my-posh 方法一：（更新）直接在 Microsoft Store 中搜索 oh-my-posh 并安装。 方法二：打开 Terminal，然后打开一个 PowerShell 窗口。命令行中执行以下命令安装 oh-my-posh 模块： Install-Module oh-my-posh -Scope CurrentUser 设置主题 安装完成后，执行 Get-PoshThemes 命令，将以各自主题的样式列出支持的主题。 其中有一些乱码，这实际是一些图标，需要安装字体包来提供图标支持，具体方法后续给出。 先进行主题设置。选择主题可以从以上命令的返回结果中选择自己中意的，然后执行以下命令就能进行安装： Set-PoshPrompt -Theme 主题名字 我们需要配置 PowerShell 的启动脚本，以使主题永久生效。执行以下命令打开脚本文件。若提示文件不存在，则同意创建。 notepad $Profile 然后在打开的脚本文件中输入以下命令： Import-Module oh-my-posh Set-PoshPrompt -Theme agnosterplus # 此处将agnosterplus替换为自己选主题名即可 如果从 Microsoft Store 安装的 oh-my-posh，则在以上脚本文件中输入以下命令： oh-my-posh init pwsh --config \"$env:POSH_THEMES_PATH\\agnosterplus.omp.json\" | Invoke-Expression # 此处将agnosterplus替换为自己选的主题即可 之后重启即可看到效果。 设置字体 为了对主题所需的图标符号提供支持，需要 Nerd Fonts 类字体，可以到字体集合主页Nerd Fonts 挑选喜欢的字体，可以预览字体效果。选好后直接下载字体文件即可。 经过一番查看，我最终凭感觉选择了Go Mono。 将下载的压缩包直接解压缩后，是一套字体文件，由于不需要其他用途，此处只安装正体的字体。选择不带Bold（加粗）不带Italic（斜体）的Windows Compatible字体文件，直接双击安装。 弹出的对话窗口，展示了字体样式，直接点击左上角安装即可。 字体已经安装好，接下来在 Terminal 下按Ctrl + ,打开设置，从左侧配置文件中选择到自己新建的PowerShell，我的是 PowerShell 7 ，然后右侧选择外观选项卡，找到字体下拉菜单，选择自己所选的字体名字即可，我的为 GoMono NF。 字体名可以从系统字体设置查看到，开始-\u003e设置-\u003e搜索字体设置-\u003e搜索字体关键字’GoMono’。可以看到我的字体名为GoMono NF。记住这个字体名，之后 VS Code 的终端 PowerShell 配置中会再次用到。 设置背景图 只需打开 Terminal 的设置，从左侧配置文件中选择到自己新建的PowerShell，然后右侧选择外观选项卡，找到背景图像设置项，浏览选择图片。选好图片后，下面会多出一些针对背景图的设置，包括模糊、透明、位置等，可以自行调整。 ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:3","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"VS Code 集成 PowerShell VS Code 内按快捷键 Ctrl + Shift + `，则在编辑窗口下面会打开一个（默认CMD）终端窗口。VS Code中已经自动集成了 CMD 和 Windows PowerShell。但我需要：1. 将新版的 PowerShell Preview 集成进来；2. 将其设置为默认打开；3. 更改终端字体，以提供主题包支持。 首先Ctrl + ,打开设置，然后搜索Terminal，找到Terminal \u003e Integrated \u003e Profiles: Windows的项，点击下面的在settings.json中编辑。 之后在打开的settings.json文件下，在terminal.integrated.profiles.windows项内按照以下红色框中代码的格式添加自己的 PowerShell 条目，其中的PowerShell 7 pre替换为自拟名字即可，path项内的路径替换为自己的 PowerShell 安装路径。然后保存并关闭文件。 如果是从Microsoft Store安装的 PowserShell，上图中的 path 字段为：\"C:\\Users\\用户名\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.PowerShellPreview_8wekyb3d8bbwe\\pwsh.exe\" 通过以上操作，我们已经为终端窗口添加了新的 PowerShell。接下来将其设置为默认打开。 仍然Ctrl + ,打开设置，搜索Terminal，找到Terminal \u003e Integrated \u003e Default Profile: Windows项，下拉选项中选择我们上一步添加的 PowerShell 的名字PowerShell 7 pre。 在设置页，搜索Terminal Font，找到Terminal \u003e Integrated \u003e Font Family项，将其值设置为我们前面安装的字体文件名 GoMono NF，由于我选的这款字体本身字号挺大，所以我还将字号改为了 12。 经过以上配置，最终的效果如下图。 ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:4","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"参考 PowerShell 美化 - j3rry Nerd Fonts oh-my-push 文档 Using Visual Studio Code for PowerShell Development - Microsoft VS Code Integrated Terminal 再谈 Windows Terminal (终端) 主题和字体美化，Oh-My-Posh、Terminal-Icons、Posh-git Windows Terminal 美化 (oh-my-posh) ","date":"2021-08-19","objectID":"/powershell%E7%BE%8E%E5%8C%96/:0:5","series":null,"tags":["PowerShell","美化","Terminal"],"title":"PowerShell美化","uri":"/powershell%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"最近因为汇总论文成果，需要提取论文的首页。虽然Acrobat提供了页面组织功能可以任意提取，但手动操作一次只能处理一个文件。当面对好几十篇论文时，尚未开始就已经放弃。 工欲善其事必先利其器，决定造个工具，一劳永逸提高效率。 以下代码基于 小白程序猿 的方案，面向我自己的需求作了一些调整适配。 环境与原料 Python PyMuPDF模块 pip install PyMuPDF 以下为完整代码： # coding:utf-8 import os import fitz # 解析 # 函数将file_path中所有文件（包括子目录中的文件），处理后，按照原目录保存到save_path下。 # 即save_path下的文件夹结构和file_path一致。 def analysis(file_path, save_path, num, toimg): # 资源列表 file_array = [] if os.path.isdir(file_path): # 目录循环压入 file_count = get_path_file(file_path) for v in file_count: file_array.append(v) else: # 单文件，单次调用 file_array.append(file_path) # 判断为空情况 if not file_array: print(\"此目录下无文件\") # 执行解析 file_count_num = len(file_array) print(\"程序运行中，共计%s个文件\" % file_count_num) success_num = file_count_num failed_file_array = [] for v in file_array: print(\"原文件路径：%s\" % v) # 获取文件名称及类型 file_name = os.path.basename(v) # print(\"文件信息：%s\" % file_name) if '.pdf' not in file_name: print(\"此文件非PDF文件，跳过\") failed_file_array.append(\"非 PDF文件：\" + file_name) success_num = success_num - 1 continue # 打开PDF文件，生成一个对象 doc = fitz.open(v) # 总页数 count_page = doc.pageCount # print(\"文件共计：%s页\" % count_page) if toimg == False: # 仅提取页面 if count_page \u003e 1: doc2 = fitz.open() # 创建新的空PDF doc2.insert_pdf(doc, to_page = num) # 提取doc的第1页到doc2 # 创建子目录 p_1 = v.replace(file_path, save_path) p_2 = p_1.replace(file_name, '') if not os.path.exists(p_2): os.makedirs(p_2) print(\"提取到路径：\" + p_2 + file_name) doc2.save(p_2 + file_name) # 保存提取出的PDF文件 print(\"提取完成\") else: print(\"此文档无内容，跳过\") failed_file_array.append(\"文件无内容：\" + file_name) success_num = success_num - 1 continue else: # 将页面转换为图片 if count_page \u003e 1: page = doc[num] rotate = int(0) # 每个尺寸的缩放系数为2，这将为我们生成分辨率提高四倍的图像。 zoom_x = 2.0 zoom_y = 2.0 trans = fitz.Matrix(zoom_x, zoom_y).preRotate(rotate) pm = page.getPixmap(matrix=trans, alpha=False) # 保存路径 # 创建子目录 p_1 = v.replace(file_path, save_path) p_2 = p_1.replace(file_name, '') if not os.path.exists(p_2): os.makedirs(p_2) new_file_name = file_name.replace(\".pdf\", \"\") print(\"提取到路径：\" + p_2 + '%s.png' % new_file_name) pm.writePNG(p_2 + '%s.png' % new_file_name) print(\"提取并转换为图片完成\") else: print(\"此文档无内容，跳过\") failed_file_array.append(file_name) success_num = success_num - 1 continue print(\"\\n\\n合计 %d 个文件提取成功，以下文件提取失败：\" % success_num) for f in failed_file_array: print(f) # 返回目录下所有文件 def get_path_file(files_path): data = [] for root, dirs, files in os.walk(files_path, topdown=False): for name in files: f_p = os.path.join(root, name).replace(\"\\\\\", \"/\") data.append(f_p) return data # 规范路径的斜杠格式 def uni_path(path: str) -\u003e str: # return path.replace(r'\\/'.replace(os.sep, ''), os.sep) # 转换为当前系统的格式 return path.replace(\"\\\\\\\\\",\"/\").replace(\"\\\\\",\"/\") # 统一转换为unix格式 if __name__ == '__main__': print(\"|---------------------------------|\") print(\"|++++++++ PDF处理工具箱 ++++++++|\") print(\"|---------------------------------|\") print(\"| |\") print(\"| 1. PDF 批量提取首页 |\") print(\"| 2. PDF 批量提取首页并转换为图片 |\") print(\"| |\") print(\"|---------------------------------|\") # 选择处理方式 toimg = False choice = input(\"请输入要执行操作的编号：\") if choice == '1': toimg = False elif choice == '2': toimg =True # 当前目录下的文件 now_path = os.getcwd() print(\"当前位置：%s\" % now_path) # 保存路径 print(\"请输入参数，以 / 结尾\") save_path = input(\"提取文件保存地址:\") # 判断目录 save_path_status = os.path.exists(save_path) if not save_path_status: os.mkdir(save_path) # 截取页数 num = 0 # 截取第一页 # 路径或文件名 file_path = input(\"待处理PDF文件地址:\") # 调用方法 analysis(uni_path(file_path), uni_path(save_path), num, toimg) ","date":"2021-08-13","objectID":"/pdftoolbox/:0:0","series":null,"tags":["PDF"],"title":"基于Python批量提取PDF首页","uri":"/pdftoolbox/"},{"categories":null,"content":"参考 Python 提取 PDF 第一页为封面图片【批量提取】 Python 把任意系统的路径转换成当前系统的格式（关于 / \\ 分隔符的） python中os.walk的用法 python PyMuPDF(fitz)包中insert_pdf的用法 ","date":"2021-08-13","objectID":"/pdftoolbox/:0:1","series":null,"tags":["PDF"],"title":"基于Python批量提取PDF首页","uri":"/pdftoolbox/"},{"categories":null,"content":"记录基于Hugo静态博客建站工具 和LoveIt主题（已换成衍生的DoIt）的个人博客过程，作为备忘。VS Code作为博客编辑、站点部署集成环境，站点维护仍然采用Github Pages。 LoveIt 换成 DoIt 由于 LoveIt 原作者已长期未维护，HEIGE-PCloud 基于 LoveIt 的新主题DoIt主题，并维持着更新。致敬∠(°ゝ°)。 DoIt 的安装配置同 LoveIt，因此此文档仍然可参考。 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:0:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"准备工作 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:1:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"安装 VS Code ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:1:1","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"安装 Git 官方下载地址：https://git-scm.com/downloads 打开下载的.exe安装包，一路Next即可。 安装完成后，在命令行窗口执行git --version命令，若能正确输出版本信息，则表示安装成功，如下图正确演示： 若遇到提示说命令不存在或找不到命令的，可尝试重新打开命令行窗口，或检查并添加git主程序路径（比如我的D:\\Dev\\Git\\cmd）到系统环境变量中（添加方法参考后面Hugo安装过程）后，再打开命令行窗口执行上面的命令。 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:1:2","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"安装 Hugo 下载 Hugo Hugo 包括基础版本和支持自定义样式scss的 extended版本。 为了提高可用性，应对未来可能的自定义需求，我决定安装 Hugo extended 版本。 从 Hugo Release下载适合版本的压缩包，我的是Windows_x64。解压缩到想要安装的目录。解压出来，只有简单的一个主程序。可见，相对于 Hexo 依赖于 Node.js 及一大堆 npm 包，Hugo 的确非常的简洁。 添加环境变量 将 Hugo 的主程序路径添加到系统环境变量中，这样在命令行终端中才能调用主程序执行一系列命令，之后我们就能直接在VS Code的终端中执行命令。我的安装路径为： D:\\Dev\\hugo_0.86.0\\ 首先打开 资源管理器/我的电脑，然后在左侧导航栏，右键点击 此电脑，在弹出菜单中，打开 属性。 依次在弹出窗口中点击 高级系统设置。 在弹出窗口中点击环境变量。 双击 path 变量，点击 添加，将 Hugo 主程序路径填入，点击 确定以保存修改。 验证配置是否成功 VS Code 中 Ctrl+Shift+` ，打开终端，输入 hugo version，若能如下图所示，无错返回版本号，则环境配置成功。 建立本地站点 打开终端，进入想将站点源文件放置的路径，执行以下命令，其中站点名指定站点工程源文件夹的名字，按照自己的需求随便取即可，和实际的网站 url不是一个东西。执行命令后，会按指定的站点名创建站点文件夹，并在文件夹下自动初始化生成路径结构以及相关的站点文件。 // 其中，hugo.wlcheng.github.io 换成自己的站点文件夹名字即可 hugo new site hugo.wlcheng.github.io cd hugo.wlcheng.github.io 输出结果如下截图： 生成的站点目录结构： ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:1:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"LoveIt 主题 在Hugo 的主题商城扫了一圈，最后选了 LoveIt这一款主题。从 LoveIt的官方网站上逛了一圈，观感很棒。真可谓官方介绍的“一款简洁、优雅且高效的Hugo博客主题”。 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:2:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"安装主题 LoveIt 主题的仓库地址是 https://github.com/dillonzq/LoveIt 。 补充：DoIt 主体仓库地址是 https://github.com/HEIGE-PCloud/DoIt 。 可以直接下载最新版主题压缩包，将其解压到站点目录下的 themes文件夹中。 也可以直接用 git 克隆到该目录下，在站点目录下执行以下命令： git clone https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:2:1","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"配置主题 替换站点配置文件 /config.toml 内容为： baseURL = \"http://wlchengg.github.io/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"Wlcheng's Life\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:2:2","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"创建文章 hugo new posts/first-blog.md // 这会在content文件夹下创建posts文件夹， // 并在里面创建first-blog.md文件。 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:2:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"部署到 Github Pages Github Pages 即为 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:3:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"创建空 Github 仓库 将仓库名取为：username.github.io Github 的人性化 Github 提供两种 Pages： (1) 用户主页：以`username.github.io`作为仓库名，直接通过`username.github.io`访问； (2) 仓库主页：任意合法名称作为仓库名，通过'github.com 填上仓库名；选定 public 仓库；不需勾选初始化选项，后续将从我们的本地仓库直接 push 到线上仓库中。 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:3:1","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"关联本地站点到仓库 进入本地站点路径； 初始化 git 环境： ’'' git init ’'' 安装主题： 自行到Hugo选择主题后，将主题仓库克隆到themes路径下。此处我用DoIt主题为例： ’'' git submodule add github.com themes/DoIt ’'' 添加 .gitignore 文件到站点根目录下，写入以下内容： ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:3:2","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"进阶 —— 通过 Github Actions 自动编译部署站点 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:3:3","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"参考 主题文档 - 基本概念 —— Dillon —— LoveIt 在 Windows 上搭建 Hugo 博客之 Github 部署填坑记 Hugo+Github Pages 搭建个人博客手记萌新向 如何挑选博客框架、在线博客平台 Git 基础原理和用法 ","date":"2021-07-27","objectID":"/blog_by_hugo_loveit/:4:0","series":null,"tags":["Hugo","博客"],"title":"Hugo 搭建过程","uri":"/blog_by_hugo_loveit/"},{"categories":null,"content":"自用软件合集，方方面面。不列不知道，一列吓一跳，竟然有这么多。 ","date":"2021-07-24","objectID":"/%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/:0:0","series":null,"tags":null,"title":"自用软件清单","uri":"/%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/"},{"categories":null,"content":"软件清单 [TOC] 系统工具 名称 功能 官网 下载 付/免费 开/闭源 媒体影音 名称 功能 官网 下载 付/免费 开/闭源 PotPlayer 数学软件 名称 功能 官网 下载 付/免费 开/闭源 Matlab 矩阵计算 Wolfram Mathematica 符号计算 MathType 公式编辑 Mathpix Snip 公式识别/Tex代码导出 官网 东师理想几何图霸 2D/3D示意图 效率工具 名称 功能 官网 下载 付/免费 开/闭源 Everything Listary Snipaste QuickLook CopyTranslator 复制翻译 官网 Quicker 火萤 社交聊天 名称 功能 官网 下载 付/免费 开/闭源 办公编辑 名称 功能 官网 下载 付/免费 开/闭源 软件开发 名称 功能 官网 下载 付/免费 开/闭源 网盘远程 名称 功能 官网 下载 付/免费 开/闭源 坚果云 OneDrive 阿里网盘 百度网盘 ToDesk 向日葵 TeamViewer VNC 系统完善 名称 功能 官网 下载 付/免费 开/闭源 TranslucentTB 任务栏透明化 earTrumpet 扬声器加强版 浏览器扩展 名称 功能 官网 下载 付/免费 开/闭源 油猴/暴力猴 脚本管理 沙拉查词 划词翻译 OneTab 标签页汇总 SingleFileZ 网页存为HTML文件 iGG谷歌访问助手 谷歌访问 集装箱 谷歌访问 uBlock Origin 广告拦截 IDM 下载 Zotero 文献工具 简阅 网页沉浸阅读模式 OneTab 划词翻译 油猴(Temper Monkey)/暴力猴(Violent Monkey)脚本 名称 功能 官网 下载 付/免费 开/闭源 ac-baidu VSCode扩展 名称 功能 官网 下载 付/免费 开/闭源 Chinese (Simplified) Language C/C++ C++ Intellisence Python Markdown preview Enhanced Latex Workshop PowerShell ESLint Bracket Pair Colorizer 2 TODO Tree Bookmarks Better Comments Prettier One Dark Pro 主题 vscode-icons change-case Local History Partial Diff ","date":"2021-07-24","objectID":"/%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/:0:1","series":null,"tags":null,"title":"自用软件清单","uri":"/%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/"},{"categories":null,"content":"本文记录对 Hexo 博客所做的初次配置。 ","date":"2021-07-24","objectID":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:0","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"主题设置 侧边菜单栏 侧边栏头像 侧边栏插入网易云音乐外链 单曲外链 打开单曲主页，生成外链： 复制外链 HTML 代码： 将代码至于标签下： \u003cdiv class=\"sidebar-inner\u003e \u003c!--网易云插件--\u003e \u003ciframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2\u0026id=25780279\u0026auto=1\u0026height=66\"\u003e\u003c/iframe\u003e \u003c/div\u003e 歌单外链 如果出现以上的版权限制，按照链接进行以下操作，： 组合成外链地址：https://music.163.com/#/outchain/0/37673790/ 但很遗憾，弹出生成失败的提示，应该是版权限制。 挖个坑，有时间来补充解决方案。 Pjax 实现背景音乐全局播放 页面跳转刷新时，音乐不间断播放。 打开主题目录下 themes/next/layout/_layout.njk 文件， 在 \u003c/head\u003e 标签前添加以下代码，并保存。 \u003chead\u003e \u003c!--pjax：防止跳转页面音乐暂停--\u003e \u003cscript src=\"https://fastly.jsdelivr.net/npm/pjax@0.2.8/pjax.js\"\u003e\u003c/script\u003e \u003c/head\u003e 主题配置文件_config.yml里，打开 pjax 开关。 # Easily enable fast Ajax navigation on your website. # For more information: https://github.com/next-theme/pjax pjax: true 参考： Hexo NexT 博客增加网易云音乐 Hexo + Next 主题实现全局播放背景音乐 主页文章阴影效果 打开 \\themes\\next\\source\\css\\_commom\\components\\posts\\index.styl，修改 .use-motion 下的 .post-block 代码，如下： // 主页添加阴影效果 .use-motion { if (hexo-config('motion.transition.post_block')) { .post-block { visibility: hidden; margin-top: 60px; margin-bottom: 60px; padding: 25px; background: rgba(255,255,255,0.9) none repeat scroll !important; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); } .pagination, .comments { visibility: hidden; } } 效果如下： 修改文章底部标签图标样式 打开 themes/next/_config.yml，搜索并将 tag_icon 项打开。原样式为\"#\"。 tag_icon: true 文章置顶（作废） 打开 themes\\next\\layout\\_macro\\post.njk，在 post-meta-container中添加以下代码： {% if post.top %} \u003ci class=\"fa fa-thumb-tack\"\u003e\u003c/i\u003e \u003cfont color=7D26CD\u003e置顶\u003c/font\u003e \u003cspan class=\"post-meta-divider\"\u003e|\u003c/span\u003e {% endif %} 文章手动排序 打开 node_modules/hexo-generator-index/lib/generator.js，修改代码为： \"use strict\"; const pagination = require(\"hexo-pagination\"); const { sort } = require(\"timsort\"); module.exports = function (locals) { var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function (a, b) { if (a.top \u0026\u0026 b.top) { // 两篇文章top都有定义 if (a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 } else if (a.top \u0026\u0026 !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; } else if (!a.top \u0026\u0026 b.top) { return 1; } else return b.date - a.date; // 都没定义按照文章日期降序排 }); var paginationDir = config.pagination_dir || \"page\"; var path = config.index_generator.path || \"\"; return pagination(\"\", posts, { perPage: config.index_generator.per_page, layout: [\"index\", \"archive\"], format: paginationDir + \"/%d/\", data: { __index: true, }, }); }; 在博文源文件头部加上 top 标识，数字越大，优先级越高： 参考： hexo 博文置顶方法——大专栏 折叠过长代码块（按参考未成功） 添加 code-unfold.js 文件 新建以下代码折叠脚本文件，放在 themes/next/source/js/下。 var CODE_MAX_HEIGHT = 200; var containers = []; // 展开 $('body').on('click', '.js_unfold_code_btn', function () { $(this).closest('.js_highlight_container').addClass('on'); }); // 收起 $('body').on('click', '.js_retract_code_btn', function () { var $container = $(this).closest('.js_highlight_container').removeClass('on'); var winTop = $(window).scrollTop(); var offsetTop = $container.offset().top; $(this).css('top', 0); if (winTop \u003e offsetTop) { // 设置滚动条位置 $('body, html').animate({ scrollTop: $container.offset().top - CODE_MAX_HEIGHT }, 600); } }); // 滚动事件，触发动画效果 $(window).on('scroll', function () { var scrollTop = $(window).scrollTop(); var temp = []; for (let i = 0; i \u003c containers.length; i++) { var item = containers[i]; var { $container, height, $hide, hasHorizontalScrollbar } = item; if ($container.closest('body').length === 0) { // 如果 $container 元素已经不在页面上, 则删除该元素 // 防止pjax页面跳转之后，元素未删除 continue; } temp.push(item); if (!$container.hasClass('on')) { continue; } var offsetTop = $container.offset().top; var hideBtnHeight = $hide.outerHeight(); // 减去按钮高度，减去底部滚动条高度 var maxTop = parseInt(height - (hasHorizontalScrollbar ? 17 : 0) - hideBtnHeight); let top = parseInt( Math.min( Math.max(scrollTop - offsetTop, 0), // 如果小于 0 ，则取 0 maxTop,// 如果大于 height ，则取 height ) ); // 根据 sin 曲线设置\"收起代码\"位置 var halfHeight = parseInt($(window).height() / 2 *","date":"2021-07-24","objectID":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:1","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"参考 Hexo Next 主题详细配置之一——Clay ","date":"2021-07-24","objectID":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/:0:2","series":null,"tags":null,"title":"Hexo NexT 主题美化","uri":"/hexo-next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"categories":null,"content":"安装 Mathtype 过程记录，并解决集成到 Word 菜单栏的问题。 ","date":"2019-11-28","objectID":"/mathtype-setup-for-word/:0:0","series":null,"tags":["MathType","Word"],"title":"MathType安装及 Word菜单项集成","uri":"/mathtype-setup-for-word/"},{"categories":null,"content":"MathType 安装问题 ","date":"2019-11-28","objectID":"/mathtype-setup-for-word/:1:0","series":null,"tags":["MathType","Word"],"title":"MathType安装及 Word菜单项集成","uri":"/mathtype-setup-for-word/"},{"categories":null,"content":"安装并破解 从 6维空间上下载的MathType 7.2版本，按照说明 首先安装 MathType-win-zh7.2.exe，安装过程一切顺利，因为安装需要向Office 添加加载项，所以需要将Office 一切程序都关闭； 以防意外，打开之前MathType 和Office 之前，先进行破解，提供的破解软件有两个，作用不同： [neubt]MathType替换原文件.exe：替换MathType 根目录的主启动程序 MathType.exe，作用是去掉打开程序时提示测试版到期的弹窗通知。 [neubt]MathType7.xCrack.zip：解压后得到mathtypelib.exe，替换MathType 根目录下System 子文件夹里的同名文件。 完成以上两个文件的替换后，启动 MathType，会弹出一个对话框，但按钮上的字都变成了问号，不管他，直接叉掉对话框，然后可以发现功能完善，应该是已经成功破解。 打开Word，菜单栏上应该会多出一个 MathType的菜单项，说明安装成功，如果没有菜单项，请看下文解决方案。 ","date":"2019-11-28","objectID":"/mathtype-setup-for-word/:1:1","series":null,"tags":["MathType","Word"],"title":"MathType安装及 Word菜单项集成","uri":"/mathtype-setup-for-word/"},{"categories":null,"content":"Word 没有MathType 菜单项 问题： 首先来说，MathType 正确加载的话，Word 的菜单栏上会有 MathType，如下 而现在问题是，打开Word，菜单栏没有 MathType 项， 原因： [1] 中给出的原因可以描述为 “当Microsoft Office自动更新程序运行并安装更新时，有时会禁用加载项，这样就会删除任何工具栏/功能区附加项。” Word 上的 MathType加载项要能正确运行并使用，须满足： MathType 正确安装； Word 正确加载 MathType 提供的加载项文件。 可见在MathType 本身安装无误情况下(指MathType 软件本身能正常使用)，Word 没有MathType菜单项的原因大概率就是因为 Word 没能正确的加载 MathType 加载项。 解决方案： 此时虽然可以迂回的通过以下方式插入公式： 通过插入对象的方式，插入-\u003e对象-\u003e选择MathType对象； 直接从MathType 软件里编辑好的公式复制进Word。 但是，如果要实现插入带编号公式等较高级的功能的话，还是用集成的 MathType工具栏方便的多，从前面的图就可见一斑。 准备工作： 首先查看 Office Word 版本以及 MathType版本，兼容关系为 查看我的版本分别为 Word：文件-\u003e账户-\u003e关于-\u003e Office 365 32位，因此需要MathType 版本大于 6.9b MathType：关于-\u003e7.2.0.420 \u003e 6.9b 确定Word 和 MathType安装路径： Office 安装路径：D:\\Program Files (x86)\\Microsoft Office\\ MathType 路径：D:\\Math\\MathType\\ 安装路径可能不同，根据自己情况而定。 步骤： Word菜单栏-\u003e文件-\u003e选项-\u003e加载项-\u003e底部管理下拉框选择 Word加载项 并点击转到，弹出类似下面的对话框， 没问题的情况下，这里的第一项应该是被勾选上的，如下说明。 如果，没有以上对话框中的项，则选择从以下两个目录之一中 添加 正确版本的 .dotm文件，然后勾选并确定。 D:\\Math\\MathType\\Office Support\\32 （32位 Office） D:\\Math\\MathType\\Office Support\\64 （64位 Office） 对于我的版本，选择 MathType Commands 2016.dotm 这一个 勾选 MathType Commands 2016.dotm 项并 确定后，Word会加载出MathType 的菜单项，如图1所示。 然而，然而，然而事情并非如此简单， 当关闭Word，并重新打开后，忙半天加上的MathType 菜单项又没啦。 这么看应该是设置的问题，在Word 启动时，并没有自动加载 MathType 加载项。那么要自动加载，是不是就得把这个MathType Commands 2016.dotm 文件放到Word 的默认加载目录下面？ 但是再次按照第3步，打开Word 加载项对话框，发现有这一项，但却没有勾选。那么怎么设置为默认勾选呢？ 幸而 [2] 对此也给出了解决方案：由于不同版本的系统、Office软件或者不同用户自定义的原因，Word 的加载项路径可能不一样。 根据说明，需要将前面的两个文件拷贝到 Word的加载项（启动项）目录下面，目录存在以上图中 3种可能，图中 1和 2根据 Office 是32位/64位只取其一。 以做对比，将可能的三个目录位置都打开，如下1、2、3，依次将这两个文件放到这三个目录下， 经过尝试，，放在 2对应路径下时，Word成功加载了MathType菜单项。 比较前后两张图，此处有一个问题，下图中除了拷贝进去的两个模板文件外，还有一个MathPage.wll，这个文件实际上是一种DLL文件，也不可少，也是来自于MathType的安装目录，事实上，当MathType安装成功后，会自动将其拷贝到这个 2 对应的目录，一般无需手动添加，如果发现没有，可以从MathType安装根目录下的MathType文件夹里面找到，如下图，根据32位或64位选择。 总结 最后，来回顾一下过程，根据 常用设置 中的，《查看 Word 相关各类文件的默认位置》就能够查看Word 默认的启动项位置，正好是上面给出的第二种目录。 因此，解决以上问题的正确思路应该是，将模板加载项文件拷贝到 Word的默认的启动项位置目录下。 参考： [1] MathType Toolbar/Tab has disappeared from Microsoft Word [2] MathType Tab has disappeared from Microsoft Word 2016 and later for Windows ","date":"2019-11-28","objectID":"/mathtype-setup-for-word/:1:2","series":null,"tags":["MathType","Word"],"title":"MathType安装及 Word菜单项集成","uri":"/mathtype-setup-for-word/"},{"categories":null,"content":"夕阳西下 清晨的东方已默默站在面前了 —— 泰戈尔《飞鸟集》 ","date":"2019-11-28","objectID":"/poem-of-beginning/:0:0","series":null,"tags":null,"title":"起源","uri":"/poem-of-beginning/"},{"categories":null,"content":"工欲善其事，必先利其器。 网站 Hugo in Action Hugo 中文帮助文档 软件 浏览器扩展 SingleFile 暴力猴 沙拉查词 待我慢慢扩充...... ","date":"0001-01-01","objectID":"/tools/:0:0","series":null,"tags":null,"title":"工具箱","uri":"/tools/"},{"categories":null,"content":"假如全世界的少女都肯携起手来， 她们可以在大海周围跳一个回旋舞。 假如全世界的男孩都肯做水手， 他们可以用他们的船在水上造成一座美丽的桥。 那时人们便可以绕着全世界跳一个回旋舞， 假如全世界的男女孩都肯携起手来。 ","date":"0001-01-01","objectID":"/friends/:0:0","series":null,"tags":null,"title":"友链","uri":"/friends/"}]